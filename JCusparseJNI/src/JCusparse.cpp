/*
 * JCusparse - Java bindings for CUSPARSE, the NVIDIA CUDA sparse
 * matrix library, to be used with JCuda
 *
 * Copyright (c) 2010-2015 Marco Hutter - http://www.jcuda.org
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include "JCusparse.hpp"
#include "JCusparse_common.hpp"
#include <iostream>
#include <string>
#include <map>

jfieldID cuComplex_x; // float
jfieldID cuComplex_y; // float

jfieldID cuDoubleComplex_x; // double
jfieldID cuDoubleComplex_y; // double


/**
 * Called when the library is loaded. Will initialize all
 * required field and method IDs
 */
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *jvm, void *reserved)
{
    JNIEnv *env = NULL;
    if (jvm->GetEnv((void **)&env, JNI_VERSION_1_4))
    {
        return JNI_ERR;
    }

    Logger::log(LOG_TRACE, "Initializing JCusparse\n");

    jclass cls = NULL;

    // Initialize the JNIUtils and PointerUtils
    if (initJNIUtils(env) == JNI_ERR) return JNI_ERR;
    if (initPointerUtils(env) == JNI_ERR) return JNI_ERR;


    // Obtain the fieldIDs for cuComplex#x and cuComplex#y
    if (!init(env, cls, "jcuda/cuComplex")) return JNI_ERR;
    if (!init(env, cls, cuComplex_x, "x", "F")) return JNI_ERR;
    if (!init(env, cls, cuComplex_y, "y", "F")) return JNI_ERR;


    // Obtain the fieldIDs for cuDoubleComplex#x and cuDoubleComplex#y
    if (!init(env, cls, "jcuda/cuDoubleComplex")) return JNI_ERR;
    if (!init(env, cls, cuDoubleComplex_x, "x", "D")) return JNI_ERR;
    if (!init(env, cls, cuDoubleComplex_y, "y", "D")) return JNI_ERR;

    return JNI_VERSION_1_4;
}


/*
 * Set the log level
 *
 * Class:     jcuda_jcusparse_JCusparse
 * Method:    setLogLevelNative
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jcuda_jcusparse_JCusparse_setLogLevelNative
  (JNIEnv *env, jclass cla, jint logLevel)
{
    Logger::setLogLevel((LogLevel)logLevel);
}





/**
 * Converts the given jobject
 * into a cuComplex
 * and returns whether this conversion succeeded.
 */
bool initNative(JNIEnv *env, jobject &input, cuComplex &output)
{
    output.x = env->GetFloatField(input, cuComplex_x);
    output.y = env->GetFloatField(input, cuComplex_y);
    if (env->ExceptionCheck())
    {
        return false;
    }
    return true;
}

/**
 * Converts the given jobject
 * into a cuDoubleComplex
 * and returns whether this conversion succeeded.
 */
bool initNative(JNIEnv *env, jobject &input, cuDoubleComplex &output)
{
    output.x = env->GetDoubleField(input, cuDoubleComplex_x);
    output.y = env->GetDoubleField(input, cuDoubleComplex_y);
    if (env->ExceptionCheck())
    {
        return false;
    }
    return true;
}


/** CUSPARSE initialization and managment routines */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateNative(JNIEnv *env, jclass cls, jobject handle)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCreate");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreate(handle=%p)\n",
        handle);

    // Native variable declarations
    cusparseHandle_t handle_native;

    // Obtain native variable values
    // handle is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreate(&handle_native);

    // Write back native variable values
    setNativePointerValue(env, handle, (jlong)handle_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyNative(JNIEnv *env, jclass cls, jobject handle)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDestroy");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroy(handle=%p)\n",
        handle);

    // Native variable declarations
    cusparseHandle_t handle_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroy(handle_native);

    // Write back native variable values
    // handle is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetVersionNative(JNIEnv *env, jclass cls, jobject handle, jintArray version)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseGetVersion");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (version == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'version' is null for cusparseGetVersion");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetVersion(handle=%p, version=%p)\n",
        handle, version);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int version_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    // version is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseGetVersion(handle_native, &version_native);

    // Write back native variable values
    // handle is read-only
    if (!set(env, version, 0, (jint)version_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetPropertyNative(JNIEnv *env, jclass cls, jint type, jintArray value)
{
    // Null-checks for non-primitive arguments
    // type is primitive
    if (value == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'value' is null for cusparseGetProperty");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetProperty(type=%d, value=%p)\n",
        type, value);

    // Native variable declarations
    libraryPropertyType type_native;
    int value_native;

    // Obtain native variable values
    type_native = (libraryPropertyType)type;
    // value is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseGetProperty(type_native, &value_native);

    // Write back native variable values
    // type is primitive
    if (!set(env, value, 0, (jint)value_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSetStreamNative(JNIEnv *env, jclass cls, jobject handle, jobject streamId)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSetStream");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // streamId may be NULL

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSetStream(handle=%p, streamId=%p)\n",
        handle, streamId);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cudaStream_t streamId_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    streamId_native = (cudaStream_t)getNativePointerValue(env, streamId);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSetStream(handle_native, streamId_native);

    // Write back native variable values
    // handle is read-only
    // streamId is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetStreamNative(JNIEnv *env, jclass cls, jobject handle, jobject streamId)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseGetStream");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (streamId == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'streamId' is null for cusparseGetStream");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetStream(handle=%p, streamId=%p)\n",
        handle, streamId);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cudaStream_t streamId_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    // streamId is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseGetStream(handle_native, &streamId_native);

    // Write back native variable values
    // handle is read-only
    setNativePointerValue(env, streamId, (jlong)streamId_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** CUSPARSE type creation, destruction, set and get routines */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetPointerModeNative(JNIEnv *env, jclass cls, jobject handle, jintArray mode)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseGetPointerMode");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (mode == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'mode' is null for cusparseGetPointerMode");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetPointerMode(handle=%p, mode=%p)\n",
        handle, mode);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparsePointerMode_t mode_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    // mode is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseGetPointerMode(handle_native, &mode_native);

    // Write back native variable values
    // handle is read-only
    if (!set(env, mode, 0, (jint)mode_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSetPointerModeNative(JNIEnv *env, jclass cls, jobject handle, jint mode)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSetPointerMode");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mode is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSetPointerMode(handle=%p, mode=%d)\n",
        handle, mode);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparsePointerMode_t mode_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mode_native = (cusparsePointerMode_t)mode;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSetPointerMode(handle_native, mode_native);

    // Write back native variable values
    // handle is read-only
    // mode is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** sparse matrix descriptor */
/**
* <pre>
* When the matrix descriptor is created, its fields are initialized to:
CUSPARSE_MATRIX_TYPE_GENERAL
CUSPARSE_INDEX_BASE_ZERO
All other fields are uninitialized
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateMatDescrNative(JNIEnv *env, jclass cls, jobject descrA)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCreateMatDescr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateMatDescr(descrA=%p)\n",
        descrA);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;

    // Obtain native variable values
    // descrA is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateMatDescr(&descrA_native);

    // Write back native variable values
    setNativePointerValue(env, descrA, (jlong)descrA_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyMatDescrNative(JNIEnv *env, jclass cls, jobject descrA)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDestroyMatDescr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyMatDescr(descrA=%p)\n",
        descrA);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyMatDescr(descrA_native);

    // Write back native variable values
    // descrA is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCopyMatDescrNative(JNIEnv *env, jclass cls, jobject dest, jobject src)
{
    // Null-checks for non-primitive arguments
    if (dest == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dest' is null for cusparseCopyMatDescr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (src == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'src' is null for cusparseCopyMatDescr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCopyMatDescr(dest=%p, src=%p)\n",
        dest, src);

    // Native variable declarations
    cusparseMatDescr_t dest_native;
    cusparseMatDescr_t src_native;

    // Obtain native variable values
    dest_native = (cusparseMatDescr_t)getNativePointerValue(env, dest);
    src_native = (cusparseMatDescr_t)getNativePointerValue(env, src);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCopyMatDescr(dest_native, src_native);

    // Write back native variable values
    // dest is read-only
    // src is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSetMatTypeNative(JNIEnv *env, jclass cls, jobject descrA, jint type)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSetMatType");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // type is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSetMatType(descrA=%p, type=%d)\n",
        descrA, type);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;
    cusparseMatrixType_t type_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    type_native = (cusparseMatrixType_t)type;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSetMatType(descrA_native, type_native);

    // Write back native variable values
    // descrA is read-only
    // type is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetMatTypeNative(JNIEnv *env, jclass cls, jobject descrA)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseGetMatType");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetMatType(descrA=%p)\n",
        descrA);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);

    // Native function call
    cusparseMatrixType_t jniResult_native = cusparseGetMatType(descrA_native);

    // Write back native variable values
    // descrA is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSetMatFillModeNative(JNIEnv *env, jclass cls, jobject descrA, jint fillMode)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSetMatFillMode");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // fillMode is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSetMatFillMode(descrA=%p, fillMode=%d)\n",
        descrA, fillMode);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;
    cusparseFillMode_t fillMode_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    fillMode_native = (cusparseFillMode_t)fillMode;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSetMatFillMode(descrA_native, fillMode_native);

    // Write back native variable values
    // descrA is read-only
    // fillMode is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetMatFillModeNative(JNIEnv *env, jclass cls, jobject descrA)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseGetMatFillMode");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetMatFillMode(descrA=%p)\n",
        descrA);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);

    // Native function call
    cusparseFillMode_t jniResult_native = cusparseGetMatFillMode(descrA_native);

    // Write back native variable values
    // descrA is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSetMatDiagTypeNative(JNIEnv *env, jclass cls, jobject descrA, jint diagType)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSetMatDiagType");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // diagType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSetMatDiagType(descrA=%p, diagType=%d)\n",
        descrA, diagType);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;
    cusparseDiagType_t diagType_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    diagType_native = (cusparseDiagType_t)diagType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSetMatDiagType(descrA_native, diagType_native);

    // Write back native variable values
    // descrA is read-only
    // diagType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetMatDiagTypeNative(JNIEnv *env, jclass cls, jobject descrA)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseGetMatDiagType");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetMatDiagType(descrA=%p)\n",
        descrA);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);

    // Native function call
    cusparseDiagType_t jniResult_native = cusparseGetMatDiagType(descrA_native);

    // Write back native variable values
    // descrA is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSetMatIndexBaseNative(JNIEnv *env, jclass cls, jobject descrA, jint base)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSetMatIndexBase");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // base is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSetMatIndexBase(descrA=%p, base=%d)\n",
        descrA, base);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;
    cusparseIndexBase_t base_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    base_native = (cusparseIndexBase_t)base;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSetMatIndexBase(descrA_native, base_native);

    // Write back native variable values
    // descrA is read-only
    // base is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetMatIndexBaseNative(JNIEnv *env, jclass cls, jobject descrA)
{
    // Null-checks for non-primitive arguments
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseGetMatIndexBase");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetMatIndexBase(descrA=%p)\n",
        descrA);

    // Native variable declarations
    cusparseMatDescr_t descrA_native;

    // Obtain native variable values
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);

    // Native function call
    cusparseIndexBase_t jniResult_native = cusparseGetMatIndexBase(descrA_native);

    // Write back native variable values
    // descrA is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** sparse triangular solve and incomplete-LU and Cholesky (algorithm 1) */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateSolveAnalysisInfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateSolveAnalysisInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateSolveAnalysisInfo(info=%p)\n",
        info);

    // Native variable declarations
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateSolveAnalysisInfo(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroySolveAnalysisInfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroySolveAnalysisInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroySolveAnalysisInfo(info=%p)\n",
        info);

    // Native variable declarations
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroySolveAnalysisInfo(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetLevelInfoNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jintArray nlevels, jobject levelPtr, jobject levelInd)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseGetLevelInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseGetLevelInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nlevels == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nlevels' is null for cusparseGetLevelInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (levelPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'levelPtr' is null for cusparseGetLevelInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (levelInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'levelInd' is null for cusparseGetLevelInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetLevelInfo(handle=%p, info=%p, nlevels=%p, levelPtr=%p, levelInd=%p)\n",
        handle, info, nlevels, levelPtr, levelInd);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseSolveAnalysisInfo_t info_native;
    int nlevels_native;
    int * * levelPtr_native;
    int * * levelInd_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    // nlevels is write-only
    levelPtr_native = (int * *)getPointer(env, levelPtr);
    levelInd_native = (int * *)getPointer(env, levelInd);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseGetLevelInfo(handle_native, info_native, &nlevels_native, levelPtr_native, levelInd_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    if (!set(env, nlevels, 0, (jint)nlevels_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // levelPtr is a native pointer
    // levelInd is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** sparse triangular solve (algorithm 2) */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateCsrsv2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateCsrsv2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateCsrsv2Info(info=%p)\n",
        info);

    // Native variable declarations
    csrsv2Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateCsrsv2Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyCsrsv2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyCsrsv2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyCsrsv2Info(info=%p)\n",
        info);

    // Native variable declarations
    csrsv2Info_t info_native;

    // Obtain native variable values
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyCsrsv2Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** incomplete Cholesky (algorithm 2)*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateCsric02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateCsric02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateCsric02Info(info=%p)\n",
        info);

    // Native variable declarations
    csric02Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateCsric02Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyCsric02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyCsric02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyCsric02Info(info=%p)\n",
        info);

    // Native variable declarations
    csric02Info_t info_native;

    // Obtain native variable values
    info_native = (csric02Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyCsric02Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateBsric02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateBsric02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateBsric02Info(info=%p)\n",
        info);

    // Native variable declarations
    bsric02Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateBsric02Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyBsric02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyBsric02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyBsric02Info(info=%p)\n",
        info);

    // Native variable declarations
    bsric02Info_t info_native;

    // Obtain native variable values
    info_native = (bsric02Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyBsric02Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** incomplete LU (algorithm 2) */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateCsrilu02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateCsrilu02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateCsrilu02Info(info=%p)\n",
        info);

    // Native variable declarations
    csrilu02Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateCsrilu02Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyCsrilu02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyCsrilu02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyCsrilu02Info(info=%p)\n",
        info);

    // Native variable declarations
    csrilu02Info_t info_native;

    // Obtain native variable values
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyCsrilu02Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateBsrilu02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateBsrilu02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateBsrilu02Info(info=%p)\n",
        info);

    // Native variable declarations
    bsrilu02Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateBsrilu02Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyBsrilu02InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyBsrilu02Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyBsrilu02Info(info=%p)\n",
        info);

    // Native variable declarations
    bsrilu02Info_t info_native;

    // Obtain native variable values
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyBsrilu02Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** block-CSR triangular solve (algorithm 2) */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateBsrsv2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateBsrsv2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateBsrsv2Info(info=%p)\n",
        info);

    // Native variable declarations
    bsrsv2Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateBsrsv2Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyBsrsv2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyBsrsv2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyBsrsv2Info(info=%p)\n",
        info);

    // Native variable declarations
    bsrsv2Info_t info_native;

    // Obtain native variable values
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyBsrsv2Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateBsrsm2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateBsrsm2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateBsrsm2Info(info=%p)\n",
        info);

    // Native variable declarations
    bsrsm2Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateBsrsm2Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyBsrsm2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyBsrsm2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyBsrsm2Info(info=%p)\n",
        info);

    // Native variable declarations
    bsrsm2Info_t info_native;

    // Obtain native variable values
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyBsrsm2Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** hybrid (HYB) format */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateHybMatNative(JNIEnv *env, jclass cls, jobject hybA)
{
    // Null-checks for non-primitive arguments
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseCreateHybMat");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateHybMat(hybA=%p)\n",
        hybA);

    // Native variable declarations
    cusparseHybMat_t hybA_native;

    // Obtain native variable values
    // hybA is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateHybMat(&hybA_native);

    // Write back native variable values
    setNativePointerValue(env, hybA, (jlong)hybA_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyHybMatNative(JNIEnv *env, jclass cls, jobject hybA)
{
    // Null-checks for non-primitive arguments
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDestroyHybMat");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyHybMat(hybA=%p)\n",
        hybA);

    // Native variable declarations
    cusparseHybMat_t hybA_native;

    // Obtain native variable values
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyHybMat(hybA_native);

    // Write back native variable values
    // hybA is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** sorting information */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateCsru2csrInfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateCsru2csrInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateCsru2csrInfo(info=%p)\n",
        info);

    // Native variable declarations
    csru2csrInfo_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateCsru2csrInfo(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyCsru2csrInfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyCsru2csrInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyCsru2csrInfo(info=%p)\n",
        info);

    // Native variable declarations
    csru2csrInfo_t info_native;

    // Obtain native variable values
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyCsru2csrInfo(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** coloring info */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateColorInfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateColorInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateColorInfo(info=%p)\n",
        info);

    // Native variable declarations
    cusparseColorInfo_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateColorInfo(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyColorInfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyColorInfo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyColorInfo(info=%p)\n",
        info);

    // Native variable declarations
    cusparseColorInfo_t info_native;

    // Obtain native variable values
    info_native = (cusparseColorInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyColorInfo(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSetColorAlgsNative(JNIEnv *env, jclass cls, jobject info, jint alg)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSetColorAlgs");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // alg is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSetColorAlgs(info=%p, alg=%d)\n",
        info, alg);

    // Native variable declarations
    cusparseColorInfo_t info_native;
    cusparseColorAlg_t alg_native;

    // Obtain native variable values
    info_native = (cusparseColorInfo_t)getNativePointerValue(env, info);
    alg_native = (cusparseColorAlg_t)alg;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSetColorAlgs(info_native, alg_native);

    // Write back native variable values
    // info is read-only
    // alg is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseGetColorAlgsNative(JNIEnv *env, jclass cls, jobject info, jintArray alg)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseGetColorAlgs");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (alg == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alg' is null for cusparseGetColorAlgs");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseGetColorAlgs(info=%p, alg=%p)\n",
        info, alg);

    // Native variable declarations
    cusparseColorInfo_t info_native;
    cusparseColorAlg_t alg_native;

    // Obtain native variable values
    info_native = (cusparseColorInfo_t)getNativePointerValue(env, info);
    // alg is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseGetColorAlgs(info_native, &alg_native);

    // Write back native variable values
    // info is read-only
    if (!set(env, alg, 0, (jint)alg_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Level 1 routines --- */
/** Description: Addition of a scalar multiple of a sparse vector x
and a dense vector y. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSaxpyiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject alpha, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseSaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseSaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSaxpyi(handle=%p, nnz=%d, alpha=%p, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, alpha, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    float * alpha_native = NULL;
    float * xVal_native = NULL;
    int * xInd_native = NULL;
    float * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    xVal_native = (float *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (float *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSaxpyi(handle_native, nnz_native, alpha_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDaxpyiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject alpha, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseDaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseDaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDaxpyi(handle=%p, nnz=%d, alpha=%p, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, alpha, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    double * alpha_native = NULL;
    double * xVal_native = NULL;
    int * xInd_native = NULL;
    double * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    xVal_native = (double *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (double *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDaxpyi(handle_native, nnz_native, alpha_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCaxpyiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject alpha, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseCaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseCaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCaxpyi(handle=%p, nnz=%d, alpha=%p, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, alpha, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuComplex * alpha_native = NULL;
    cuComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuComplex * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    xVal_native = (cuComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuComplex *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCaxpyi(handle_native, nnz_native, alpha_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZaxpyiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject alpha, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseZaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseZaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZaxpyi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZaxpyi(handle=%p, nnz=%d, alpha=%p, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, alpha, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cuDoubleComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuDoubleComplex * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    xVal_native = (cuDoubleComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuDoubleComplex *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZaxpyi(handle_native, nnz_native, alpha_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: dot product of a sparse vector x and a dense vector y. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSdotiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject resultDevHostPtr, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseSdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseSdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (resultDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'resultDevHostPtr' is null for cusparseSdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSdoti(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, resultDevHostPtr=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, resultDevHostPtr, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    float * xVal_native = NULL;
    int * xInd_native = NULL;
    float * y_native = NULL;
    float * resultDevHostPtr_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (float *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (float *)getPointer(env, y);
    PointerData *resultDevHostPtr_pointerData = initPointerData(env, resultDevHostPtr);
    if (resultDevHostPtr_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    resultDevHostPtr_native = (float *)resultDevHostPtr_pointerData->getPointer(env);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSdoti(handle_native, nnz_native, xVal_native, xInd_native, y_native, resultDevHostPtr_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // If the PointerData is not backed by native memory, then this call has to block
    if (!isPointerBackedByNativeMemory(env, resultDevHostPtr))
    {
        cudaDeviceSynchronize();
    }
    if (!releasePointerData(env, resultDevHostPtr_pointerData, 0)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDdotiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject resultDevHostPtr, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseDdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseDdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (resultDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'resultDevHostPtr' is null for cusparseDdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDdoti(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, resultDevHostPtr=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, resultDevHostPtr, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    double * xVal_native = NULL;
    int * xInd_native = NULL;
    double * y_native = NULL;
    double * resultDevHostPtr_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (double *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (double *)getPointer(env, y);
    PointerData *resultDevHostPtr_pointerData = initPointerData(env, resultDevHostPtr);
    if (resultDevHostPtr_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    resultDevHostPtr_native = (double *)resultDevHostPtr_pointerData->getPointer(env);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDdoti(handle_native, nnz_native, xVal_native, xInd_native, y_native, resultDevHostPtr_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // If the PointerData is not backed by native memory, then this call has to block
    if (!isPointerBackedByNativeMemory(env, resultDevHostPtr))
    {
        cudaDeviceSynchronize();
    }
    if (!releasePointerData(env, resultDevHostPtr_pointerData, 0)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCdotiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject resultDevHostPtr, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseCdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseCdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (resultDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'resultDevHostPtr' is null for cusparseCdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCdoti(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, resultDevHostPtr=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, resultDevHostPtr, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuComplex * y_native = NULL;
    cuComplex * resultDevHostPtr_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (cuComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuComplex *)getPointer(env, y);
    PointerData *resultDevHostPtr_pointerData = initPointerData(env, resultDevHostPtr);
    if (resultDevHostPtr_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    resultDevHostPtr_native = (cuComplex *)resultDevHostPtr_pointerData->getPointer(env);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCdoti(handle_native, nnz_native, xVal_native, xInd_native, y_native, resultDevHostPtr_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // If the PointerData is not backed by native memory, then this call has to block
    if (!isPointerBackedByNativeMemory(env, resultDevHostPtr))
    {
        cudaDeviceSynchronize();
    }
    if (!releasePointerData(env, resultDevHostPtr_pointerData, 0)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZdotiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject resultDevHostPtr, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseZdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseZdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (resultDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'resultDevHostPtr' is null for cusparseZdoti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZdoti(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, resultDevHostPtr=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, resultDevHostPtr, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuDoubleComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuDoubleComplex * y_native = NULL;
    cuDoubleComplex * resultDevHostPtr_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (cuDoubleComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuDoubleComplex *)getPointer(env, y);
    PointerData *resultDevHostPtr_pointerData = initPointerData(env, resultDevHostPtr);
    if (resultDevHostPtr_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    resultDevHostPtr_native = (cuDoubleComplex *)resultDevHostPtr_pointerData->getPointer(env);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZdoti(handle_native, nnz_native, xVal_native, xInd_native, y_native, resultDevHostPtr_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // If the PointerData is not backed by native memory, then this call has to block
    if (!isPointerBackedByNativeMemory(env, resultDevHostPtr))
    {
        cudaDeviceSynchronize();
    }
    if (!releasePointerData(env, resultDevHostPtr_pointerData, 0)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: dot product of complex conjugate of a sparse vector x
and a dense vector y. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCdotciNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject resultDevHostPtr, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseCdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseCdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (resultDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'resultDevHostPtr' is null for cusparseCdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCdotci(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, resultDevHostPtr=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, resultDevHostPtr, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuComplex * y_native = NULL;
    cuComplex * resultDevHostPtr_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (cuComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuComplex *)getPointer(env, y);
    PointerData *resultDevHostPtr_pointerData = initPointerData(env, resultDevHostPtr);
    if (resultDevHostPtr_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    resultDevHostPtr_native = (cuComplex *)resultDevHostPtr_pointerData->getPointer(env);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCdotci(handle_native, nnz_native, xVal_native, xInd_native, y_native, resultDevHostPtr_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // If the PointerData is not backed by native memory, then this call has to block
    if (!isPointerBackedByNativeMemory(env, resultDevHostPtr))
    {
        cudaDeviceSynchronize();
    }
    if (!releasePointerData(env, resultDevHostPtr_pointerData, 0)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZdotciNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject resultDevHostPtr, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseZdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseZdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (resultDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'resultDevHostPtr' is null for cusparseZdotci");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZdotci(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, resultDevHostPtr=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, resultDevHostPtr, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuDoubleComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuDoubleComplex * y_native = NULL;
    cuDoubleComplex * resultDevHostPtr_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (cuDoubleComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuDoubleComplex *)getPointer(env, y);
    PointerData *resultDevHostPtr_pointerData = initPointerData(env, resultDevHostPtr);
    if (resultDevHostPtr_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    resultDevHostPtr_native = (cuDoubleComplex *)resultDevHostPtr_pointerData->getPointer(env);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZdotci(handle_native, nnz_native, xVal_native, xInd_native, y_native, resultDevHostPtr_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // If the PointerData is not backed by native memory, then this call has to block
    if (!isPointerBackedByNativeMemory(env, resultDevHostPtr))
    {
        cudaDeviceSynchronize();
    }
    if (!releasePointerData(env, resultDevHostPtr_pointerData, 0)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Gather of non-zero elements from dense vector y into
sparse vector x. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgthrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseSgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseSgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgthr(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    float * y_native = NULL;
    float * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (float *)getPointer(env, y);
    xVal_native = (float *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgthr(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgthrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseDgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseDgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgthr(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    double * y_native = NULL;
    double * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (double *)getPointer(env, y);
    xVal_native = (double *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgthr(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgthrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseCgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseCgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgthr(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuComplex * y_native = NULL;
    cuComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (cuComplex *)getPointer(env, y);
    xVal_native = (cuComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgthr(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgthrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseZgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseZgthr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgthr(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuDoubleComplex * y_native = NULL;
    cuDoubleComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (cuDoubleComplex *)getPointer(env, y);
    xVal_native = (cuDoubleComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgthr(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Gather of non-zero elements from desne vector y into
sparse vector x (also replacing these elements in y by zeros). */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgthrzNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseSgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseSgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgthrz(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    float * y_native = NULL;
    float * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (float *)getPointer(env, y);
    xVal_native = (float *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgthrz(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgthrzNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseDgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseDgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgthrz(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    double * y_native = NULL;
    double * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (double *)getPointer(env, y);
    xVal_native = (double *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgthrz(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgthrzNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseCgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseCgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgthrz(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuComplex * y_native = NULL;
    cuComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (cuComplex *)getPointer(env, y);
    xVal_native = (cuComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgthrz(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgthrzNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject y, jobject xVal, jobject xInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseZgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseZgthrz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgthrz(handle=%p, nnz=%d, y=%p, xVal=%p, xInd=%p, idxBase=%d)\n",
        handle, nnz, y, xVal, xInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuDoubleComplex * y_native = NULL;
    cuDoubleComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    y_native = (cuDoubleComplex *)getPointer(env, y);
    xVal_native = (cuDoubleComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgthrz(handle_native, nnz_native, y_native, xVal_native, xInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // y is a native pointer
    // xVal is a native pointer
    // xInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Scatter of elements of the sparse vector x into
dense vector y. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSsctrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseSsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseSsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSsctr(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    float * xVal_native = NULL;
    int * xInd_native = NULL;
    float * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (float *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (float *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSsctr(handle_native, nnz_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDsctrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseDsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseDsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDsctr(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    double * xVal_native = NULL;
    int * xInd_native = NULL;
    double * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (double *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (double *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDsctr(handle_native, nnz_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCsctrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseCsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseCsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCsctr(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuComplex * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (cuComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuComplex *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCsctr(handle_native, nnz_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZsctrNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseZsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseZsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZsctr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZsctr(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    cuDoubleComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuDoubleComplex * y_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (cuDoubleComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (cuDoubleComplex *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZsctr(handle_native, nnz_native, xVal_native, xInd_native, y_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Givens rotation, where c and s are cosine and sine,
x and y are sparse and dense vectors, respectively. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSrotiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject c, jobject s, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseSroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseSroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (c == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'c' is null for cusparseSroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (s == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 's' is null for cusparseSroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSroti(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, c=%p, s=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, c, s, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    float * xVal_native = NULL;
    int * xInd_native = NULL;
    float * y_native = NULL;
    float * c_native = NULL;
    float * s_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (float *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (float *)getPointer(env, y);
    c_native = (float *)getPointer(env, c);
    s_native = (float *)getPointer(env, s);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSroti(handle_native, nnz_native, xVal_native, xInd_native, y_native, c_native, s_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // c is a native pointer
    // s is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDrotiNative(JNIEnv *env, jclass cls, jobject handle, jint nnz, jobject xVal, jobject xInd, jobject y, jobject c, jobject s, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseDroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseDroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (c == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'c' is null for cusparseDroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (s == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 's' is null for cusparseDroti");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDroti(handle=%p, nnz=%d, xVal=%p, xInd=%p, y=%p, c=%p, s=%p, idxBase=%d)\n",
        handle, nnz, xVal, xInd, y, c, s, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int nnz_native = 0;
    double * xVal_native = NULL;
    int * xInd_native = NULL;
    double * y_native = NULL;
    double * c_native = NULL;
    double * s_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    nnz_native = (int)nnz;
    xVal_native = (double *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    y_native = (double *)getPointer(env, y);
    c_native = (double *)getPointer(env, c);
    s_native = (double *)getPointer(env, s);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDroti(handle_native, nnz_native, xVal_native, xInd_native, y_native, c_native, s_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    // y is a native pointer
    // c is a native pointer
    // s is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Level 2 routines --- */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgemviNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject A, jint lda, jint nnz, jobject xVal, jobject xInd, jobject beta, jobject y, jint idxBase, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgemvi(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, A=%p, lda=%d, nnz=%d, xVal=%p, xInd=%p, beta=%p, y=%p, idxBase=%d, pBuffer=%p)\n",
        handle, transA, m, n, alpha, A, lda, nnz, xVal, xInd, beta, y, idxBase, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    float * alpha_native = NULL;
    float * A_native = NULL;
    int lda_native = 0;
    int nnz_native = 0;
    float * xVal_native = NULL;
    int * xInd_native = NULL;
    float * beta_native = NULL;
    float * y_native = NULL;
    cusparseIndexBase_t idxBase_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;
    nnz_native = (int)nnz;
    xVal_native = (float *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    y_native = (float *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgemvi(handle_native, transA_native, m_native, n_native, alpha_native, A_native, lda_native, nnz_native, xVal_native, xInd_native, beta_native, y_native, idxBase_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer
    // idxBase is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgemvi_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseSgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgemvi_bufferSize(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, pBufferSize=%p)\n",
        handle, transA, m, n, nnz, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgemvi_bufferSize(handle_native, transA_native, m_native, n_native, nnz_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgemviNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject A, jint lda, jint nnz, jobject xVal, jobject xInd, jobject beta, jobject y, jint idxBase, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgemvi(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, A=%p, lda=%d, nnz=%d, xVal=%p, xInd=%p, beta=%p, y=%p, idxBase=%d, pBuffer=%p)\n",
        handle, transA, m, n, alpha, A, lda, nnz, xVal, xInd, beta, y, idxBase, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    double * alpha_native = NULL;
    double * A_native = NULL;
    int lda_native = 0;
    int nnz_native = 0;
    double * xVal_native = NULL;
    int * xInd_native = NULL;
    double * beta_native = NULL;
    double * y_native = NULL;
    cusparseIndexBase_t idxBase_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;
    nnz_native = (int)nnz;
    xVal_native = (double *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    y_native = (double *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgemvi(handle_native, transA_native, m_native, n_native, alpha_native, A_native, lda_native, nnz_native, xVal_native, xInd_native, beta_native, y_native, idxBase_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer
    // idxBase is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgemvi_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgemvi_bufferSize(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, pBufferSize=%p)\n",
        handle, transA, m, n, nnz, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgemvi_bufferSize(handle_native, transA_native, m_native, n_native, nnz_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgemviNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject A, jint lda, jint nnz, jobject xVal, jobject xInd, jobject beta, jobject y, jint idxBase, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgemvi(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, A=%p, lda=%d, nnz=%d, xVal=%p, xInd=%p, beta=%p, y=%p, idxBase=%d, pBuffer=%p)\n",
        handle, transA, m, n, alpha, A, lda, nnz, xVal, xInd, beta, y, idxBase, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    cuComplex * alpha_native = NULL;
    cuComplex * A_native = NULL;
    int lda_native = 0;
    int nnz_native = 0;
    cuComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuComplex * beta_native = NULL;
    cuComplex * y_native = NULL;
    cusparseIndexBase_t idxBase_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnz_native = (int)nnz;
    xVal_native = (cuComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    y_native = (cuComplex *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgemvi(handle_native, transA_native, m_native, n_native, alpha_native, A_native, lda_native, nnz_native, xVal_native, xInd_native, beta_native, y_native, idxBase_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer
    // idxBase is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgemvi_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgemvi_bufferSize(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, pBufferSize=%p)\n",
        handle, transA, m, n, nnz, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgemvi_bufferSize(handle_native, transA_native, m_native, n_native, nnz_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgemviNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject A, jint lda, jint nnz, jobject xVal, jobject xInd, jobject beta, jobject y, jint idxBase, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    // nnz is primitive
    if (xVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xVal' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (xInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'xInd' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZgemvi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgemvi(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, A=%p, lda=%d, nnz=%d, xVal=%p, xInd=%p, beta=%p, y=%p, idxBase=%d, pBuffer=%p)\n",
        handle, transA, m, n, alpha, A, lda, nnz, xVal, xInd, beta, y, idxBase, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * xVal_native = NULL;
    int * xInd_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * y_native = NULL;
    cusparseIndexBase_t idxBase_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnz_native = (int)nnz;
    xVal_native = (cuDoubleComplex *)getPointer(env, xVal);
    xInd_native = (int *)getPointer(env, xInd);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    y_native = (cuDoubleComplex *)getPointer(env, y);
    idxBase_native = (cusparseIndexBase_t)idxBase;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgemvi(handle_native, transA_native, m_native, n_native, alpha_native, A_native, lda_native, nnz_native, xVal_native, xInd_native, beta_native, y_native, idxBase_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // nnz is primitive
    // xVal is a native pointer
    // xInd is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer
    // idxBase is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgemvi_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZgemvi_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgemvi_bufferSize(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, pBufferSize=%p)\n",
        handle, transA, m, n, nnz, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgemvi_bufferSize(handle_native, transA_native, m_native, n_native, nnz_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Matrix-vector multiplication  y = alpha * op(A) * x  + beta * y,
where A is a sparse matrix in CSR storage format, x and y are dense vectors. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseScsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrmv(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * x_native = NULL;
    float * beta_native = NULL;
    float * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (float *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    y_native = (float *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrmv(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrmv(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * x_native = NULL;
    double * beta_native = NULL;
    double * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (double *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    y_native = (double *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrmv(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrmv(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuComplex * x_native = NULL;
    cuComplex * beta_native = NULL;
    cuComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (cuComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    y_native = (cuComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrmv(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZcsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrmv(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuDoubleComplex * x_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (cuDoubleComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    y_native = (cuDoubleComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrmv(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

//Returns number of bytes
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCsrmvEx_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint alg, jint transA, jint m, jint n, jint nnz, jobject alpha, jint alphatype, jobject descrA, jobject csrValA, jint csrValAtype, jobject csrRowPtrA, jobject csrColIndA, jobject x, jint xtype, jobject beta, jint betatype, jobject y, jint ytype, jint executiontype, jlongArray bufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // alg is primitive
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // alphatype is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrValA' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // csrValAtype is primitive
    if (csrRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtrA' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColIndA' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // xtype is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // betatype is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ytype is primitive
    // executiontype is primitive
    if (bufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bufferSizeInBytes' is null for cusparseCsrmvEx_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCsrmvEx_bufferSize(handle=%p, alg=%d, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, alphatype=%d, descrA=%p, csrValA=%p, csrValAtype=%d, csrRowPtrA=%p, csrColIndA=%p, x=%p, xtype=%d, beta=%p, betatype=%d, y=%p, ytype=%d, executiontype=%d, bufferSizeInBytes=%p)\n",
        handle, alg, transA, m, n, nnz, alpha, alphatype, descrA, csrValA, csrValAtype, csrRowPtrA, csrColIndA, x, xtype, beta, betatype, y, ytype, executiontype, bufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseAlgMode_t alg_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    void * alpha_native = NULL;
    cudaDataType alphatype_native;
    cusparseMatDescr_t descrA_native;
    void * csrValA_native = NULL;
    cudaDataType csrValAtype_native;
    int * csrRowPtrA_native = NULL;
    int * csrColIndA_native = NULL;
    void * x_native = NULL;
    cudaDataType xtype_native;
    void * beta_native = NULL;
    cudaDataType betatype_native;
    void * y_native = NULL;
    cudaDataType ytype_native;
    cudaDataType executiontype_native;
    size_t * bufferSizeInBytes_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    alg_native = (cusparseAlgMode_t)alg;
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (void *)alpha_pointerData->getPointer(env);
    alphatype_native = (cudaDataType)alphatype;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrValA_native = (void *)getPointer(env, csrValA);
    csrValAtype_native = (cudaDataType)csrValAtype;
    csrRowPtrA_native = (int *)getPointer(env, csrRowPtrA);
    csrColIndA_native = (int *)getPointer(env, csrColIndA);
    x_native = (void *)getPointer(env, x);
    xtype_native = (cudaDataType)xtype;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (void *)beta_pointerData->getPointer(env);
    betatype_native = (cudaDataType)betatype;
    y_native = (void *)getPointer(env, y);
    ytype_native = (cudaDataType)ytype;
    executiontype_native = (cudaDataType)executiontype;
    bufferSizeInBytes_native = (size_t *)getPointer(env, bufferSizeInBytes);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCsrmvEx_bufferSize(handle_native, alg_native, transA_native, m_native, n_native, nnz_native, alpha_native, alphatype_native, descrA_native, csrValA_native, csrValAtype_native, csrRowPtrA_native, csrColIndA_native, x_native, xtype_native, beta_native, betatype_native, y_native, ytype_native, executiontype_native, bufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // alg is primitive
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // alphatype is primitive
    // descrA is read-only
    // csrValA is a native pointer
    // csrValAtype is primitive
    // csrRowPtrA is a native pointer
    // csrColIndA is a native pointer
    // x is a native pointer
    // xtype is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // betatype is primitive
    // y is a native pointer
    // ytype is primitive
    // executiontype is primitive
    // bufferSizeInBytes is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCsrmvExNative(JNIEnv *env, jclass cls, jobject handle, jint alg, jint transA, jint m, jint n, jint nnz, jobject alpha, jint alphatype, jobject descrA, jobject csrValA, jint csrValAtype, jobject csrRowPtrA, jobject csrColIndA, jobject x, jint xtype, jobject beta, jint betatype, jobject y, jint ytype, jint executiontype, jobject buffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // alg is primitive
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // alphatype is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrValA' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // csrValAtype is primitive
    if (csrRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtrA' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColIndA' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // xtype is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // betatype is primitive
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ytype is primitive
    // executiontype is primitive
    if (buffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'buffer' is null for cusparseCsrmvEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCsrmvEx(handle=%p, alg=%d, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, alphatype=%d, descrA=%p, csrValA=%p, csrValAtype=%d, csrRowPtrA=%p, csrColIndA=%p, x=%p, xtype=%d, beta=%p, betatype=%d, y=%p, ytype=%d, executiontype=%d, buffer=%p)\n",
        handle, alg, transA, m, n, nnz, alpha, alphatype, descrA, csrValA, csrValAtype, csrRowPtrA, csrColIndA, x, xtype, beta, betatype, y, ytype, executiontype, buffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseAlgMode_t alg_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    void * alpha_native = NULL;
    cudaDataType alphatype_native;
    cusparseMatDescr_t descrA_native;
    void * csrValA_native = NULL;
    cudaDataType csrValAtype_native;
    int * csrRowPtrA_native = NULL;
    int * csrColIndA_native = NULL;
    void * x_native = NULL;
    cudaDataType xtype_native;
    void * beta_native = NULL;
    cudaDataType betatype_native;
    void * y_native = NULL;
    cudaDataType ytype_native;
    cudaDataType executiontype_native;
    void * buffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    alg_native = (cusparseAlgMode_t)alg;
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (void *)alpha_pointerData->getPointer(env);
    alphatype_native = (cudaDataType)alphatype;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrValA_native = (void *)getPointer(env, csrValA);
    csrValAtype_native = (cudaDataType)csrValAtype;
    csrRowPtrA_native = (int *)getPointer(env, csrRowPtrA);
    csrColIndA_native = (int *)getPointer(env, csrColIndA);
    x_native = (void *)getPointer(env, x);
    xtype_native = (cudaDataType)xtype;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (void *)beta_pointerData->getPointer(env);
    betatype_native = (cudaDataType)betatype;
    y_native = (void *)getPointer(env, y);
    ytype_native = (cudaDataType)ytype;
    executiontype_native = (cudaDataType)executiontype;
    buffer_native = (void *)getPointer(env, buffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCsrmvEx(handle_native, alg_native, transA_native, m_native, n_native, nnz_native, alpha_native, alphatype_native, descrA_native, csrValA_native, csrValAtype_native, csrRowPtrA_native, csrColIndA_native, x_native, xtype_native, beta_native, betatype_native, y_native, ytype_native, executiontype_native, buffer_native);

    // Write back native variable values
    // handle is read-only
    // alg is primitive
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // alphatype is primitive
    // descrA is read-only
    // csrValA is a native pointer
    // csrValAtype is primitive
    // csrRowPtrA is a native pointer
    // csrColIndA is a native pointer
    // x is a native pointer
    // xtype is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // betatype is primitive
    // y is a native pointer
    // ytype is primitive
    // executiontype is primitive
    // buffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Matrix-vector multiplication  y = alpha * op(A) * x  + beta * y,
where A is a sparse matrix in CSR storage format, x and y are dense vectors
using a Merge Path load-balancing implementation. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrmv_1mpNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseScsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrmv_mp(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * x_native = NULL;
    float * beta_native = NULL;
    float * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (float *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    y_native = (float *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrmv_mp(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrmv_1mpNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrmv_mp(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * x_native = NULL;
    double * beta_native = NULL;
    double * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (double *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    y_native = (double *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrmv_mp(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrmv_1mpNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrmv_mp(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuComplex * x_native = NULL;
    cuComplex * beta_native = NULL;
    cuComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (cuComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    y_native = (cuComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrmv_mp(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrmv_1mpNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZcsrmv_mp");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrmv_mp(handle=%p, transA=%d, m=%d, n=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, m, n, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuDoubleComplex * x_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    x_native = (cuDoubleComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    y_native = (cuDoubleComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrmv_mp(handle_native, transA_native, m_native, n_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Matrix-vector multiplication  y = alpha * op(A) * x  + beta * y,
where A is a sparse matrix in HYB storage format, x and y are dense vectors. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseShybmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject alpha, jobject descrA, jobject hybA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseShybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseShybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseShybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseShybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseShybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseShybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseShybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseShybmv(handle=%p, transA=%d, alpha=%p, descrA=%p, hybA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, alpha, descrA, hybA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    float * x_native = NULL;
    float * beta_native = NULL;
    float * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    x_native = (float *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    y_native = (float *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseShybmv(handle_native, transA_native, alpha_native, descrA_native, hybA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // hybA is read-only
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDhybmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject alpha, jobject descrA, jobject hybA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDhybmv(handle=%p, transA=%d, alpha=%p, descrA=%p, hybA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, alpha, descrA, hybA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    double * x_native = NULL;
    double * beta_native = NULL;
    double * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    x_native = (double *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    y_native = (double *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDhybmv(handle_native, transA_native, alpha_native, descrA_native, hybA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // hybA is read-only
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseChybmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject alpha, jobject descrA, jobject hybA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseChybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseChybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseChybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseChybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseChybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseChybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseChybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseChybmv(handle=%p, transA=%d, alpha=%p, descrA=%p, hybA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, alpha, descrA, hybA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuComplex * x_native = NULL;
    cuComplex * beta_native = NULL;
    cuComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    x_native = (cuComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    y_native = (cuComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseChybmv(handle_native, transA_native, alpha_native, descrA_native, hybA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // hybA is read-only
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZhybmvNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject alpha, jobject descrA, jobject hybA, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZhybmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZhybmv(handle=%p, transA=%d, alpha=%p, descrA=%p, hybA=%p, x=%p, beta=%p, y=%p)\n",
        handle, transA, alpha, descrA, hybA, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuDoubleComplex * x_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    x_native = (cuDoubleComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    y_native = (cuDoubleComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZhybmv(handle_native, transA_native, alpha_native, descrA_native, hybA_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // hybA is read-only
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Matrix-vector multiplication  y = alpha * op(A) * x  + beta * y,
where A is a sparse matrix in BSR storage format, x and y are dense vectors. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrmv(handle=%p, dirA=%d, transA=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    float * x_native = NULL;
    float * beta_native = NULL;
    float * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (float *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    y_native = (float *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrmv(handle_native, dirA_native, transA_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrmv(handle=%p, dirA=%d, transA=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    double * x_native = NULL;
    double * beta_native = NULL;
    double * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (double *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    y_native = (double *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrmv(handle_native, dirA_native, transA_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrmv(handle=%p, dirA=%d, transA=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cuComplex * x_native = NULL;
    cuComplex * beta_native = NULL;
    cuComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (cuComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    y_native = (cuComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrmv(handle_native, dirA_native, transA_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZbsrmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrmv(handle=%p, dirA=%d, transA=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cuDoubleComplex * x_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (cuDoubleComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    y_native = (cuDoubleComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrmv(handle_native, dirA_native, transA_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Matrix-vector multiplication  y = alpha * op(A) * x  + beta * y,
where A is a sparse matrix in extended BSR storage format, x and y are dense
vectors. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrxmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint sizeOfMask, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedMaskPtrA, jobject bsrSortedRowPtrA, jobject bsrSortedEndPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedMaskPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedMaskPtrA' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedEndPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedEndPtrA' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseSbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrxmv(handle=%p, dirA=%d, transA=%d, sizeOfMask=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedMaskPtrA=%p, bsrSortedRowPtrA=%p, bsrSortedEndPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, sizeOfMask, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedMaskPtrA, bsrSortedRowPtrA, bsrSortedEndPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int sizeOfMask_native = 0;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedMaskPtrA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedEndPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    float * x_native = NULL;
    float * beta_native = NULL;
    float * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    sizeOfMask_native = (int)sizeOfMask;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedMaskPtrA_native = (int *)getPointer(env, bsrSortedMaskPtrA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedEndPtrA_native = (int *)getPointer(env, bsrSortedEndPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (float *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    y_native = (float *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrxmv(handle_native, dirA_native, transA_native, sizeOfMask_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedMaskPtrA_native, bsrSortedRowPtrA_native, bsrSortedEndPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedMaskPtrA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedEndPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrxmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint sizeOfMask, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedMaskPtrA, jobject bsrSortedRowPtrA, jobject bsrSortedEndPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedMaskPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedMaskPtrA' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedEndPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedEndPtrA' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseDbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrxmv(handle=%p, dirA=%d, transA=%d, sizeOfMask=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedMaskPtrA=%p, bsrSortedRowPtrA=%p, bsrSortedEndPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, sizeOfMask, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedMaskPtrA, bsrSortedRowPtrA, bsrSortedEndPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int sizeOfMask_native = 0;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedMaskPtrA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedEndPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    double * x_native = NULL;
    double * beta_native = NULL;
    double * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    sizeOfMask_native = (int)sizeOfMask;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedMaskPtrA_native = (int *)getPointer(env, bsrSortedMaskPtrA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedEndPtrA_native = (int *)getPointer(env, bsrSortedEndPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (double *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    y_native = (double *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrxmv(handle_native, dirA_native, transA_native, sizeOfMask_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedMaskPtrA_native, bsrSortedRowPtrA_native, bsrSortedEndPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedMaskPtrA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedEndPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrxmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint sizeOfMask, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedMaskPtrA, jobject bsrSortedRowPtrA, jobject bsrSortedEndPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedMaskPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedMaskPtrA' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedEndPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedEndPtrA' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseCbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrxmv(handle=%p, dirA=%d, transA=%d, sizeOfMask=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedMaskPtrA=%p, bsrSortedRowPtrA=%p, bsrSortedEndPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, sizeOfMask, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedMaskPtrA, bsrSortedRowPtrA, bsrSortedEndPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int sizeOfMask_native = 0;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedMaskPtrA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedEndPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cuComplex * x_native = NULL;
    cuComplex * beta_native = NULL;
    cuComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    sizeOfMask_native = (int)sizeOfMask;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedMaskPtrA_native = (int *)getPointer(env, bsrSortedMaskPtrA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedEndPtrA_native = (int *)getPointer(env, bsrSortedEndPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (cuComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    y_native = (cuComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrxmv(handle_native, dirA_native, transA_native, sizeOfMask_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedMaskPtrA_native, bsrSortedRowPtrA_native, bsrSortedEndPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedMaskPtrA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedEndPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrxmvNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint sizeOfMask, jint mb, jint nb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedMaskPtrA, jobject bsrSortedRowPtrA, jobject bsrSortedEndPtrA, jobject bsrSortedColIndA, jint blockDim, jobject x, jobject beta, jobject y)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedMaskPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedMaskPtrA' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedEndPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedEndPtrA' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (y == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'y' is null for cusparseZbsrxmv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrxmv(handle=%p, dirA=%d, transA=%d, sizeOfMask=%d, mb=%d, nb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedMaskPtrA=%p, bsrSortedRowPtrA=%p, bsrSortedEndPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, x=%p, beta=%p, y=%p)\n",
        handle, dirA, transA, sizeOfMask, mb, nb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedMaskPtrA, bsrSortedRowPtrA, bsrSortedEndPtrA, bsrSortedColIndA, blockDim, x, beta, y);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int sizeOfMask_native = 0;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedMaskPtrA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedEndPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cuDoubleComplex * x_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * y_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    sizeOfMask_native = (int)sizeOfMask;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedMaskPtrA_native = (int *)getPointer(env, bsrSortedMaskPtrA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedEndPtrA_native = (int *)getPointer(env, bsrSortedEndPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    x_native = (cuDoubleComplex *)getPointer(env, x);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    y_native = (cuDoubleComplex *)getPointer(env, y);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrxmv(handle_native, dirA_native, transA_native, sizeOfMask_native, mb_native, nb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedMaskPtrA_native, bsrSortedRowPtrA_native, bsrSortedEndPtrA_native, bsrSortedColIndA_native, blockDim_native, x_native, beta_native, y_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // sizeOfMask is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedMaskPtrA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedEndPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // x is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // y is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Solution of triangular linear system op(A) * x = alpha * f,
where A is a sparse matrix in CSR storage format, rhs f and solution x
are dense vectors. This routine implements algorithm 1 for the solve. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCsrsv_1analysisExNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jint csrSortedValAtype, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint executiontype)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCsrsv_analysisEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCsrsv_analysisEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCsrsv_analysisEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // csrSortedValAtype is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCsrsv_analysisEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCsrsv_analysisEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCsrsv_analysisEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // executiontype is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCsrsv_analysisEx(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedValAtype=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, executiontype=%d)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedValAtype, csrSortedRowPtrA, csrSortedColIndA, info, executiontype);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    void * csrSortedValA_native = NULL;
    cudaDataType csrSortedValAtype_native;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    cudaDataType executiontype_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (void *)getPointer(env, csrSortedValA);
    csrSortedValAtype_native = (cudaDataType)csrSortedValAtype;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    executiontype_native = (cudaDataType)executiontype;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCsrsv_analysisEx(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedValAtype_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, executiontype_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedValAtype is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // executiontype is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsv_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsv_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsv_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsv_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsv_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsv_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsv_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsv_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCsrsv_1solveExNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jobject alpha, jint alphatype, jobject descrA, jobject csrSortedValA, jint csrSortedValAtype, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jint ftype, jobject x, jint xtype, jint executiontype)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // alphatype is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // csrSortedValAtype is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ftype is primitive
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCsrsv_solveEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // xtype is primitive
    // executiontype is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCsrsv_solveEx(handle=%p, transA=%d, m=%d, alpha=%p, alphatype=%d, descrA=%p, csrSortedValA=%p, csrSortedValAtype=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, ftype=%d, x=%p, xtype=%d, executiontype=%d)\n",
        handle, transA, m, alpha, alphatype, descrA, csrSortedValA, csrSortedValAtype, csrSortedRowPtrA, csrSortedColIndA, info, f, ftype, x, xtype, executiontype);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    void * alpha_native = NULL;
    cudaDataType alphatype_native;
    cusparseMatDescr_t descrA_native;
    void * csrSortedValA_native = NULL;
    cudaDataType csrSortedValAtype_native;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    void * f_native = NULL;
    cudaDataType ftype_native;
    void * x_native = NULL;
    cudaDataType xtype_native;
    cudaDataType executiontype_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (void *)alpha_pointerData->getPointer(env);
    alphatype_native = (cudaDataType)alphatype;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (void *)getPointer(env, csrSortedValA);
    csrSortedValAtype_native = (cudaDataType)csrSortedValAtype;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (void *)getPointer(env, f);
    ftype_native = (cudaDataType)ftype;
    x_native = (void *)getPointer(env, x);
    xtype_native = (cudaDataType)xtype;
    executiontype_native = (cudaDataType)executiontype;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCsrsv_solveEx(handle_native, transA_native, m_native, alpha_native, alphatype_native, descrA_native, csrSortedValA_native, csrSortedValAtype_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, ftype_native, x_native, xtype_native, executiontype_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // alphatype is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedValAtype is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // ftype is primitive
    // x is a native pointer
    // xtype is primitive
    // executiontype is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseScsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsv_solve(handle=%p, transA=%d, m=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p)\n",
        handle, transA, m, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    float * f_native = NULL;
    float * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (float *)getPointer(env, f);
    x_native = (float *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsv_solve(handle_native, transA_native, m_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsv_solve(handle=%p, transA=%d, m=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p)\n",
        handle, transA, m, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    double * f_native = NULL;
    double * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (double *)getPointer(env, f);
    x_native = (double *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsv_solve(handle_native, transA_native, m_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsv_solve(handle=%p, transA=%d, m=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p)\n",
        handle, transA, m, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    cuComplex * f_native = NULL;
    cuComplex * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (cuComplex *)getPointer(env, f);
    x_native = (cuComplex *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsv_solve(handle_native, transA_native, m_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZcsrsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsv_solve(handle=%p, transA=%d, m=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p)\n",
        handle, transA, m, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    cuDoubleComplex * f_native = NULL;
    cuDoubleComplex * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (cuDoubleComplex *)getPointer(env, f);
    x_native = (cuDoubleComplex *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsv_solve(handle_native, transA_native, m_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Solution of triangular linear system op(A) * x = alpha * f,
where A is a sparse matrix in CSR storage format, rhs f and solution y
are dense vectors. This routine implements algorithm 1 for this problem.
* Also, it provides a utility function to query size of buffer used.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsrsv2_1zeroPivotNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jobject position)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsrsv2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXcsrsv2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (position == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'position' is null for cusparseXcsrsv2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsrsv2_zeroPivot(handle=%p, info=%p, position=%p)\n",
        handle, info, position);

    // Native variable declarations
    cusparseHandle_t handle_native;
    csrsv2Info_t info_native;
    int * position_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    position_native = (int *)getPointer(env, position);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsrsv2_zeroPivot(handle_native, info_native, position_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // position is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseScsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsv2_bufferSize(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsv2_bufferSize(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsv2_bufferSize(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsv2_bufferSize(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsv2_bufferSize(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsv2_bufferSize(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZcsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsv2_bufferSize(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsv2_bufferSize(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseScsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsv2_bufferSizeExt(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSize=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsv2_bufferSizeExt(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsv2_bufferSizeExt(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSize=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsv2_bufferSizeExt(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsv2_bufferSizeExt(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSize=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsv2_bufferSizeExt(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZcsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsv2_bufferSizeExt(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSize=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsv2_bufferSizeExt(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsv2_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsv2_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsv2_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsv2_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsv2_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsv2_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsv2_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsv2_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsv2_solve(handle=%p, transA=%d, m=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    float * f_native = NULL;
    float * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    f_native = (float *)getPointer(env, f);
    x_native = (float *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsv2_solve(handle_native, transA_native, m_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsv2_solve(handle=%p, transA=%d, m=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    double * f_native = NULL;
    double * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    f_native = (double *)getPointer(env, f);
    x_native = (double *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsv2_solve(handle_native, transA_native, m_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsv2_solve(handle=%p, transA=%d, m=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    cuComplex * f_native = NULL;
    cuComplex * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    f_native = (cuComplex *)getPointer(env, f);
    x_native = (cuComplex *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsv2_solve(handle_native, transA_native, m_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsv2_solve(handle=%p, transA=%d, m=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, transA, m, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrsv2Info_t info_native;
    cuDoubleComplex * f_native = NULL;
    cuDoubleComplex * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrsv2Info_t)getNativePointerValue(env, info);
    f_native = (cuDoubleComplex *)getPointer(env, f);
    x_native = (cuDoubleComplex *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsv2_solve(handle_native, transA_native, m_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Solution of triangular linear system op(A) * x = alpha * f,
where A is a sparse matrix in block-CSR storage format, rhs f and solution y
are dense vectors. This routine implements algorithm 2 for this problem.
* Also, it provides a utility function to query size of buffer used.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXbsrsv2_1zeroPivotNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jobject position)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXbsrsv2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXbsrsv2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (position == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'position' is null for cusparseXbsrsv2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXbsrsv2_zeroPivot(handle=%p, info=%p, position=%p)\n",
        handle, info, position);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsrsv2Info_t info_native;
    int * position_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    position_native = (int *)getPointer(env, position);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXbsrsv2_zeroPivot(handle_native, info_native, position_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // position is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseSbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsv2_bufferSize(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsv2_bufferSize(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsv2_bufferSize(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsv2_bufferSize(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsv2_bufferSize(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsv2_bufferSize(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsv2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZbsrsv2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsv2_bufferSize(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsv2_bufferSize(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseSbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsv2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    bsrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsv2_bufferSizeExt(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsv2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    bsrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsv2_bufferSizeExt(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsv2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    bsrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsv2_bufferSizeExt(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsv2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZbsrsv2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsv2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    bsrsv2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsv2_bufferSizeExt(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsv2_analysis(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsv2_analysis(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsv2_analysis(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsv2_analysis(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsv2_analysis(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsv2_analysis(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsv2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZbsrsv2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsv2_analysis(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsv2_analysis(handle_native, dirA_native, transA_native, mb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsv2_solve(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    float * f_native = NULL;
    float * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    f_native = (float *)getPointer(env, f);
    x_native = (float *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsv2_solve(handle_native, dirA_native, transA_native, mb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsv2_solve(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    double * f_native = NULL;
    double * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    f_native = (double *)getPointer(env, f);
    x_native = (double *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsv2_solve(handle_native, dirA_native, transA_native, mb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsv2_solve(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    cuComplex * f_native = NULL;
    cuComplex * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    f_native = (cuComplex *)getPointer(env, f);
    x_native = (cuComplex *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsv2_solve(handle_native, dirA_native, transA_native, mb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsv2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint mb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject info, jobject f, jobject x, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZbsrsv2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsv2_solve(handle=%p, dirA=%d, transA=%d, mb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, info=%p, f=%p, x=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, mb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, info, f, x, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    bsrsv2Info_t info_native;
    cuDoubleComplex * f_native = NULL;
    cuDoubleComplex * x_native = NULL;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    info_native = (bsrsv2Info_t)getNativePointerValue(env, info);
    f_native = (cuDoubleComplex *)getPointer(env, f);
    x_native = (cuDoubleComplex *)getPointer(env, x);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsv2_solve(handle_native, dirA_native, transA_native, mb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, info_native, f_native, x_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // mb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // info is read-only
    // f is a native pointer
    // x is a native pointer
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Solution of triangular linear system op(A) * x = alpha * f,
where A is a sparse matrix in HYB storage format, rhs f and solution x
are dense vectors. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseShybsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject descrA, jobject hybA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseShybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseShybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseShybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseShybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseShybsv_analysis(handle=%p, transA=%d, descrA=%p, hybA=%p, info=%p)\n",
        handle, transA, descrA, hybA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseShybsv_analysis(handle_native, transA_native, descrA_native, hybA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // descrA is read-only
    // hybA is read-only
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDhybsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject descrA, jobject hybA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDhybsv_analysis(handle=%p, transA=%d, descrA=%p, hybA=%p, info=%p)\n",
        handle, transA, descrA, hybA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDhybsv_analysis(handle_native, transA_native, descrA_native, hybA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // descrA is read-only
    // hybA is read-only
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseChybsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject descrA, jobject hybA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseChybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseChybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseChybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseChybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseChybsv_analysis(handle=%p, transA=%d, descrA=%p, hybA=%p, info=%p)\n",
        handle, transA, descrA, hybA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseChybsv_analysis(handle_native, transA_native, descrA_native, hybA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // descrA is read-only
    // hybA is read-only
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZhybsv_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jobject descrA, jobject hybA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZhybsv_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZhybsv_analysis(handle=%p, transA=%d, descrA=%p, hybA=%p, info=%p)\n",
        handle, transA, descrA, hybA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZhybsv_analysis(handle_native, transA_native, descrA_native, hybA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // descrA is read-only
    // hybA is read-only
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseShybsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint trans, jobject alpha, jobject descra, jobject hybA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseShybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseShybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseShybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseShybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseShybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseShybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseShybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseShybsv_solve(handle=%p, trans=%d, alpha=%p, descra=%p, hybA=%p, info=%p, f=%p, x=%p)\n",
        handle, trans, alpha, descra, hybA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    float * alpha_native = NULL;
    cusparseMatDescr_t descra_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;
    float * f_native = NULL;
    float * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (float *)getPointer(env, f);
    x_native = (float *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseShybsv_solve(handle_native, trans_native, alpha_native, descra_native, hybA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descra is read-only
    // hybA is read-only
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseChybsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint trans, jobject alpha, jobject descra, jobject hybA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseChybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseChybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseChybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseChybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseChybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseChybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseChybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseChybsv_solve(handle=%p, trans=%d, alpha=%p, descra=%p, hybA=%p, info=%p, f=%p, x=%p)\n",
        handle, trans, alpha, descra, hybA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descra_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;
    cuComplex * f_native = NULL;
    cuComplex * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (cuComplex *)getPointer(env, f);
    x_native = (cuComplex *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseChybsv_solve(handle_native, trans_native, alpha_native, descra_native, hybA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descra is read-only
    // hybA is read-only
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDhybsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint trans, jobject alpha, jobject descra, jobject hybA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseDhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseDhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDhybsv_solve(handle=%p, trans=%d, alpha=%p, descra=%p, hybA=%p, info=%p, f=%p, x=%p)\n",
        handle, trans, alpha, descra, hybA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    double * alpha_native = NULL;
    cusparseMatDescr_t descra_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;
    double * f_native = NULL;
    double * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (double *)getPointer(env, f);
    x_native = (double *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDhybsv_solve(handle_native, trans_native, alpha_native, descra_native, hybA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descra is read-only
    // hybA is read-only
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZhybsv_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint trans, jobject alpha, jobject descra, jobject hybA, jobject info, jobject f, jobject x)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseZhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (f == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'f' is null for cusparseZhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZhybsv_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZhybsv_solve(handle=%p, trans=%d, alpha=%p, descra=%p, hybA=%p, info=%p, f=%p, x=%p)\n",
        handle, trans, alpha, descra, hybA, info, f, x);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descra_native;
    cusparseHybMat_t hybA_native;
    cusparseSolveAnalysisInfo_t info_native;
    cuDoubleComplex * f_native = NULL;
    cuDoubleComplex * x_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    f_native = (cuDoubleComplex *)getPointer(env, f);
    x_native = (cuDoubleComplex *)getPointer(env, x);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZhybsv_solve(handle_native, trans_native, alpha_native, descra_native, hybA_native, info_native, f_native, x_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descra is read-only
    // hybA is read-only
    // info is read-only
    // f is a native pointer
    // x is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Level 3 routines --- */
/** Description: sparse - dense matrix multiplication C = alpha * op(A) * B  + beta * C,
where A is a sparse matrix in CSR format, B and C are dense tall matrices.  */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseScsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrmm(handle=%p, transA=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * B_native = NULL;
    int ldb_native = 0;
    float * beta_native = NULL;
    float * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (float *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    C_native = (float *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrmm(handle_native, transA_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseDcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrmm(handle=%p, transA=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * B_native = NULL;
    int ldb_native = 0;
    double * beta_native = NULL;
    double * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (double *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    C_native = (double *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrmm(handle_native, transA_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseCcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrmm(handle=%p, transA=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuComplex * B_native = NULL;
    int ldb_native = 0;
    cuComplex * beta_native = NULL;
    cuComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (cuComplex *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    C_native = (cuComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrmm(handle_native, transA_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseZcsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrmm(handle=%p, transA=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuDoubleComplex * B_native = NULL;
    int ldb_native = 0;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (cuDoubleComplex *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    C_native = (cuDoubleComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrmm(handle_native, transA_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: sparse - dense matrix multiplication C = alpha * op(A) * B  + beta * C,
where A is a sparse matrix in CSR format, B and C are dense tall matrices.
This routine allows transposition of matrix B, which may improve performance. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrmm2Native(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseScsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrmm2(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, transB, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * B_native = NULL;
    int ldb_native = 0;
    float * beta_native = NULL;
    float * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (float *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    C_native = (float *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrmm2(handle_native, transA_native, transB_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrmm2Native(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseDcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrmm2(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, transB, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * B_native = NULL;
    int ldb_native = 0;
    double * beta_native = NULL;
    double * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (double *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    C_native = (double *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrmm2(handle_native, transA_native, transB_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrmm2Native(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseCcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrmm2(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, transB, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuComplex * B_native = NULL;
    int ldb_native = 0;
    cuComplex * beta_native = NULL;
    cuComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (cuComplex *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    C_native = (cuComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrmm2(handle_native, transA_native, transB_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrmm2Native(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jint nnz, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseZcsrmm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrmm2(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, transA, transB, m, n, k, nnz, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuDoubleComplex * B_native = NULL;
    int ldb_native = 0;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    B_native = (cuDoubleComplex *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    C_native = (cuDoubleComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrmm2(handle_native, transA_native, transB_native, m_native, n_native, k_native, nnz_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: sparse - dense matrix multiplication C = alpha * op(A) * B  + beta * C,
where A is a sparse matrix in block-CSR format, B and C are dense tall matrices.
This routine allows transposition of matrix B, which may improve performance. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint kb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseSbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrmm(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, kb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, dirA, transA, transB, mb, n, kb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int kb_native = 0;
    int nnzb_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    float * B_native = NULL;
    int ldb_native = 0;
    float * beta_native = NULL;
    float * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    kb_native = (int)kb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    B_native = (float *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    C_native = (float *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrmm(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, kb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint kb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseDbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrmm(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, kb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, dirA, transA, transB, mb, n, kb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int kb_native = 0;
    int nnzb_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    double * B_native = NULL;
    int ldb_native = 0;
    double * beta_native = NULL;
    double * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    kb_native = (int)kb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    B_native = (double *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    C_native = (double *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrmm(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, kb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint kb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseCbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrmm(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, kb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, dirA, transA, transB, mb, n, kb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int kb_native = 0;
    int nnzb_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    cuComplex * B_native = NULL;
    int ldb_native = 0;
    cuComplex * beta_native = NULL;
    cuComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    kb_native = (int)kb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    B_native = (cuComplex *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    C_native = (cuComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrmm(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, kb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrmmNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint kb, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockSize, jobject B, jint ldb, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseZbsrmm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrmm(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, kb=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockSize=%d, B=%p, ldb=%d, beta=%p, C=%p, ldc=%d)\n",
        handle, dirA, transA, transB, mb, n, kb, nnzb, alpha, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockSize, B, ldb, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int kb_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockSize_native = 0;
    cuDoubleComplex * B_native = NULL;
    int ldb_native = 0;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    kb_native = (int)kb;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockSize_native = (int)blockSize;
    B_native = (cuDoubleComplex *)getPointer(env, B);
    ldb_native = (int)ldb;
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    C_native = (cuDoubleComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrmm(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, kb_native, nnzb_native, alpha_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockSize_native, B_native, ldb_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // kb is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockSize is primitive
    // B is a native pointer
    // ldb is primitive
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: dense - sparse matrix multiplication C = alpha * A * B  + beta * C,
where A is column-major dense matrix, B is a sparse matrix in CSC format,
and C is column-major dense matrix. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgemmiNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jint nnz, jobject alpha, jobject A, jint lda, jobject cscValB, jobject cscColPtrB, jobject cscRowIndB, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (cscValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscValB' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscColPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscColPtrB' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscRowIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscRowIndB' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseSgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgemmi(handle=%p, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, A=%p, lda=%d, cscValB=%p, cscColPtrB=%p, cscRowIndB=%p, beta=%p, C=%p, ldc=%d)\n",
        handle, m, n, k, nnz, alpha, A, lda, cscValB, cscColPtrB, cscRowIndB, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    float * alpha_native = NULL;
    float * A_native = NULL;
    int lda_native = 0;
    float * cscValB_native = NULL;
    int * cscColPtrB_native = NULL;
    int * cscRowIndB_native = NULL;
    float * beta_native = NULL;
    float * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;
    cscValB_native = (float *)getPointer(env, cscValB);
    cscColPtrB_native = (int *)getPointer(env, cscColPtrB);
    cscRowIndB_native = (int *)getPointer(env, cscRowIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    C_native = (float *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgemmi(handle_native, m_native, n_native, k_native, nnz_native, alpha_native, A_native, lda_native, cscValB_native, cscColPtrB_native, cscRowIndB_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // cscValB is a native pointer
    // cscColPtrB is a native pointer
    // cscRowIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgemmiNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jint nnz, jobject alpha, jobject A, jint lda, jobject cscValB, jobject cscColPtrB, jobject cscRowIndB, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (cscValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscValB' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscColPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscColPtrB' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscRowIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscRowIndB' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseDgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgemmi(handle=%p, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, A=%p, lda=%d, cscValB=%p, cscColPtrB=%p, cscRowIndB=%p, beta=%p, C=%p, ldc=%d)\n",
        handle, m, n, k, nnz, alpha, A, lda, cscValB, cscColPtrB, cscRowIndB, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    double * alpha_native = NULL;
    double * A_native = NULL;
    int lda_native = 0;
    double * cscValB_native = NULL;
    int * cscColPtrB_native = NULL;
    int * cscRowIndB_native = NULL;
    double * beta_native = NULL;
    double * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;
    cscValB_native = (double *)getPointer(env, cscValB);
    cscColPtrB_native = (int *)getPointer(env, cscColPtrB);
    cscRowIndB_native = (int *)getPointer(env, cscRowIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    C_native = (double *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgemmi(handle_native, m_native, n_native, k_native, nnz_native, alpha_native, A_native, lda_native, cscValB_native, cscColPtrB_native, cscRowIndB_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // cscValB is a native pointer
    // cscColPtrB is a native pointer
    // cscRowIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgemmiNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jint nnz, jobject alpha, jobject A, jint lda, jobject cscValB, jobject cscColPtrB, jobject cscRowIndB, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (cscValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscValB' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscColPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscColPtrB' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscRowIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscRowIndB' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseCgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgemmi(handle=%p, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, A=%p, lda=%d, cscValB=%p, cscColPtrB=%p, cscRowIndB=%p, beta=%p, C=%p, ldc=%d)\n",
        handle, m, n, k, nnz, alpha, A, lda, cscValB, cscColPtrB, cscRowIndB, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    cuComplex * alpha_native = NULL;
    cuComplex * A_native = NULL;
    int lda_native = 0;
    cuComplex * cscValB_native = NULL;
    int * cscColPtrB_native = NULL;
    int * cscRowIndB_native = NULL;
    cuComplex * beta_native = NULL;
    cuComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;
    cscValB_native = (cuComplex *)getPointer(env, cscValB);
    cscColPtrB_native = (int *)getPointer(env, cscColPtrB);
    cscRowIndB_native = (int *)getPointer(env, cscRowIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    C_native = (cuComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgemmi(handle_native, m_native, n_native, k_native, nnz_native, alpha_native, A_native, lda_native, cscValB_native, cscColPtrB_native, cscRowIndB_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // cscValB is a native pointer
    // cscColPtrB is a native pointer
    // cscRowIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgemmiNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jint nnz, jobject alpha, jobject A, jint lda, jobject cscValB, jobject cscColPtrB, jobject cscRowIndB, jobject beta, jobject C, jint ldc)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (cscValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscValB' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscColPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscColPtrB' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscRowIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscRowIndB' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (C == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'C' is null for cusparseZgemmi");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldc is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgemmi(handle=%p, m=%d, n=%d, k=%d, nnz=%d, alpha=%p, A=%p, lda=%d, cscValB=%p, cscColPtrB=%p, cscRowIndB=%p, beta=%p, C=%p, ldc=%d)\n",
        handle, m, n, k, nnz, alpha, A, lda, cscValB, cscColPtrB, cscRowIndB, beta, C, ldc);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;
    cuDoubleComplex * cscValB_native = NULL;
    int * cscColPtrB_native = NULL;
    int * cscRowIndB_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cuDoubleComplex * C_native = NULL;
    int ldc_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    nnz_native = (int)nnz;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;
    cscValB_native = (cuDoubleComplex *)getPointer(env, cscValB);
    cscColPtrB_native = (int *)getPointer(env, cscColPtrB);
    cscRowIndB_native = (int *)getPointer(env, cscRowIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    C_native = (cuDoubleComplex *)getPointer(env, C);
    ldc_native = (int)ldc;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgemmi(handle_native, m_native, n_native, k_native, nnz_native, alpha_native, A_native, lda_native, cscValB_native, cscColPtrB_native, cscRowIndB_native, beta_native, C_native, ldc_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    // nnz is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // A is a native pointer
    // lda is primitive
    // cscValB is a native pointer
    // cscColPtrB is a native pointer
    // cscRowIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // C is a native pointer
    // ldc is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Solution of triangular linear system op(A) * X = alpha * F,
with multiple right-hand-sides, where A is a sparse matrix in CSR storage
format, rhs F and solution X are dense tall matrices.
* This routine implements algorithm 1 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsm_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsm_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsm_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsm_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsm_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsm_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsm_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsm_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsm_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsm_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsm_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsm_analysis(handle=%p, transA=%d, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, transA, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsm_analysis(handle_native, transA_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrsm_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject F, jint ldf, jobject X, jint ldx)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseScsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrsm_solve(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, F=%p, ldf=%d, X=%p, ldx=%d)\n",
        handle, transA, m, n, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, F, ldf, X, ldx);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    float * F_native = NULL;
    int ldf_native = 0;
    float * X_native = NULL;
    int ldx_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    F_native = (float *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (float *)getPointer(env, X);
    ldx_native = (int)ldx;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrsm_solve(handle_native, transA_native, m_native, n_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, F_native, ldf_native, X_native, ldx_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrsm_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject F, jint ldf, jobject X, jint ldx)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseDcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrsm_solve(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, F=%p, ldf=%d, X=%p, ldx=%d)\n",
        handle, transA, m, n, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, F, ldf, X, ldx);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    double * F_native = NULL;
    int ldf_native = 0;
    double * X_native = NULL;
    int ldx_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    F_native = (double *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (double *)getPointer(env, X);
    ldx_native = (int)ldx;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrsm_solve(handle_native, transA_native, m_native, n_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, F_native, ldf_native, X_native, ldx_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrsm_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject F, jint ldf, jobject X, jint ldx)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseCcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrsm_solve(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, F=%p, ldf=%d, X=%p, ldx=%d)\n",
        handle, transA, m, n, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, F, ldf, X, ldx);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    cuComplex * F_native = NULL;
    int ldf_native = 0;
    cuComplex * X_native = NULL;
    int ldx_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    F_native = (cuComplex *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (cuComplex *)getPointer(env, X);
    ldx_native = (int)ldx;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrsm_solve(handle_native, transA_native, m_native, n_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, F_native, ldf_native, X_native, ldx_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrsm_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint m, jint n, jobject alpha, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jobject F, jint ldf, jobject X, jint ldx)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseZcsrsm_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrsm_solve(handle=%p, transA=%d, m=%d, n=%d, alpha=%p, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, F=%p, ldf=%d, X=%p, ldx=%d)\n",
        handle, transA, m, n, alpha, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, F, ldf, X, ldx);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    int m_native = 0;
    int n_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    cuDoubleComplex * F_native = NULL;
    int ldf_native = 0;
    cuDoubleComplex * X_native = NULL;
    int ldx_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    F_native = (cuDoubleComplex *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (cuDoubleComplex *)getPointer(env, X);
    ldx_native = (int)ldx;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrsm_solve(handle_native, transA_native, m_native, n_native, alpha_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, F_native, ldf_native, X_native, ldx_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Solution of triangular linear system op(A) * X = alpha * F,
with multiple right-hand-sides, where A is a sparse matrix in CSR storage
format, rhs F and solution X are dense tall matrices.
* This routine implements algorithm 2 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXbsrsm2_1zeroPivotNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jobject position)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXbsrsm2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXbsrsm2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (position == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'position' is null for cusparseXbsrsm2_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXbsrsm2_zeroPivot(handle=%p, info=%p, position=%p)\n",
        handle, info, position);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsrsm2Info_t info_native;
    int * position_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    position_native = (int *)getPointer(env, position);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXbsrsm2_zeroPivot(handle_native, info_native, position_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // position is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsm2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseSbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsm2_bufferSize(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsm2_bufferSize(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsm2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsm2_bufferSize(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsm2_bufferSize(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsm2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsm2_bufferSize(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsm2_bufferSize(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsm2_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZbsrsm2_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsm2_bufferSize(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsm2_bufferSize(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseSbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsm2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, transB, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsm2_bufferSizeExt(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsm2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, transB, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsm2_bufferSizeExt(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsm2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, transB, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsm2_bufferSizeExt(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transB, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZbsrsm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsm2_bufferSizeExt(handle=%p, dirA=%d, transA=%d, transB=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, transA, transB, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsm2_bufferSizeExt(handle_native, dirA_native, transA_native, transB_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transB is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsm2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsm2_analysis(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsm2_analysis(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsm2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsm2_analysis(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsm2_analysis(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsm2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsm2_analysis(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsm2_analysis(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsm2_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZbsrsm2_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsm2_analysis(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsm2_analysis(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrsm2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jobject F, jint ldf, jobject X, jint ldx, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrsm2_solve(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, F=%p, ldf=%d, X=%p, ldx=%d, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, alpha, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, F, ldf, X, ldx, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    float * F_native = NULL;
    int ldf_native = 0;
    float * X_native = NULL;
    int ldx_native = 0;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    F_native = (float *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (float *)getPointer(env, X);
    ldx_native = (int)ldx;
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrsm2_solve(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, alpha_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, F_native, ldf_native, X_native, ldx_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrsm2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jobject F, jint ldf, jobject X, jint ldx, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrsm2_solve(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, F=%p, ldf=%d, X=%p, ldx=%d, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, alpha, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, F, ldf, X, ldx, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    double * F_native = NULL;
    int ldf_native = 0;
    double * X_native = NULL;
    int ldx_native = 0;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    F_native = (double *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (double *)getPointer(env, X);
    ldx_native = (int)ldx;
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrsm2_solve(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, alpha_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, F_native, ldf_native, X_native, ldx_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrsm2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jobject F, jint ldf, jobject X, jint ldx, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrsm2_solve(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, F=%p, ldf=%d, X=%p, ldx=%d, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, alpha, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, F, ldf, X, ldx, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    cuComplex * F_native = NULL;
    int ldf_native = 0;
    cuComplex * X_native = NULL;
    int ldx_native = 0;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    F_native = (cuComplex *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (cuComplex *)getPointer(env, X);
    ldx_native = (int)ldx;
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrsm2_solve(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, alpha_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, F_native, ldf_native, X_native, ldx_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrsm2_1solveNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint transA, jint transXY, jint mb, jint n, jint nnzb, jobject alpha, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jobject F, jint ldf, jobject X, jint ldx, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (F == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'F' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldf is primitive
    if (X == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'X' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldx is primitive
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZbsrsm2_solve");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrsm2_solve(handle=%p, dirA=%d, transA=%d, transXY=%d, mb=%d, n=%d, nnzb=%d, alpha=%p, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, F=%p, ldf=%d, X=%p, ldx=%d, policy=%d, pBuffer=%p)\n",
        handle, dirA, transA, transXY, mb, n, nnzb, alpha, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, F, ldf, X, ldx, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transXY_native;
    int mb_native = 0;
    int n_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrsm2Info_t info_native;
    cuDoubleComplex * F_native = NULL;
    int ldf_native = 0;
    cuDoubleComplex * X_native = NULL;
    int ldx_native = 0;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    transA_native = (cusparseOperation_t)transA;
    transXY_native = (cusparseOperation_t)transXY;
    mb_native = (int)mb;
    n_native = (int)n;
    nnzb_native = (int)nnzb;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrsm2Info_t)getNativePointerValue(env, info);
    F_native = (cuDoubleComplex *)getPointer(env, F);
    ldf_native = (int)ldf;
    X_native = (cuDoubleComplex *)getPointer(env, X);
    ldx_native = (int)ldx;
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrsm2_solve(handle_native, dirA_native, transA_native, transXY_native, mb_native, n_native, nnzb_native, alpha_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, F_native, ldf_native, X_native, ldx_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // transA is primitive
    // transXY is primitive
    // mb is primitive
    // n is primitive
    // nnzb is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    // F is a native pointer
    // ldf is primitive
    // X is a native pointer
    // ldx is primitive
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Preconditioners --- */
/**
* <pre>
* Description: Compute the incomplete-LU factorization with 0 fill-in (ILU0)
of the matrix A stored in CSR format based on the information in the opaque
structure info that was obtained from the analysis phase (csrsv_analysis).
* This routine implements algorithm 1 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCsrilu0ExNative(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jint csrSortedValA_ValMtype, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint executiontype)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCsrilu0Ex");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCsrilu0Ex");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseCsrilu0Ex");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // csrSortedValA_ValMtype is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCsrilu0Ex");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCsrilu0Ex");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCsrilu0Ex");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // executiontype is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCsrilu0Ex(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedValA_ValMtype=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, executiontype=%d)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedValA_ValMtype, csrSortedRowPtrA, csrSortedColIndA, info, executiontype);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    void * csrSortedValA_ValM_native = NULL;
    cudaDataType csrSortedValA_ValMtype_native;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;
    cudaDataType executiontype_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (void *)getPointer(env, csrSortedValA_ValM);
    csrSortedValA_ValMtype_native = (cudaDataType)csrSortedValA_ValMtype;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);
    executiontype_native = (cudaDataType)executiontype;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCsrilu0Ex(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedValA_ValMtype_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, executiontype_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedValA_ValMtype is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // executiontype is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrilu0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseScsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrilu0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (float *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrilu0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrilu0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseDcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrilu0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (double *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrilu0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrilu0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseCcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrilu0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (cuComplex *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrilu0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrilu0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseZcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrilu0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrilu0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (cuDoubleComplex *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrilu0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Compute the incomplete-LU factorization with 0 fill-in (ILU0)
of the matrix A stored in CSR format based on the information in the opaque
structure info that was obtained from the analysis phase (csrsv2_analysis).
* This routine implements algorithm 2 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseScsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseScsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    csrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    float * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (float *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseDcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseDcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    csrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    double * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (double *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseCcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseCcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    csrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    cuComplex * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (cuComplex *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseZcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseZcsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    csrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    cuDoubleComplex * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (cuDoubleComplex *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsrilu02_1zeroPivotNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jobject position)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsrilu02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXcsrilu02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (position == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'position' is null for cusparseXcsrilu02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsrilu02_zeroPivot(handle=%p, info=%p, position=%p)\n",
        handle, info, position);

    // Native variable declarations
    cusparseHandle_t handle_native;
    csrilu02Info_t info_native;
    int * position_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    position_native = (int *)getPointer(env, position);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsrilu02_zeroPivot(handle_native, info_native, position_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // position is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseScsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrilu02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrilu02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrilu02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrilu02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrilu02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrilu02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZcsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrilu02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrilu02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseScsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseScsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseScsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseScsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrilu02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (float *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrilu02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseDcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseDcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseDcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrilu02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (double *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrilu02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseCcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseCcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseCcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrilu02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (cuComplex *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrilu02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseZcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseZcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseZcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZcsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrilu02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (cuDoubleComplex *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrilu02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrilu02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrilu02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrilu02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrilu02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrilu02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrilu02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrilu02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrilu02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseScsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrilu02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (float *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrilu02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseDcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrilu02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (double *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrilu02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseCcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrilu02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (cuComplex *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrilu02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseZcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrilu02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (cuDoubleComplex *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrilu02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Compute the incomplete-LU factorization with 0 fill-in (ILU0)
of the matrix A stored in block-CSR format based on the information in the opaque
structure info that was obtained from the analysis phase (bsrsv2_analysis).
* This routine implements algorithm 2 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseSbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseSbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    float * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (float *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseDbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseDbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    double * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (double *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseCbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseCbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    cuComplex * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (cuComplex *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrilu02_1numericBoostNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jint enable_boost, jobject tol, jobject boost_val)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // enable_boost is primitive
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseZbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (boost_val == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'boost_val' is null for cusparseZbsrilu02_numericBoost");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrilu02_numericBoost(handle=%p, info=%p, enable_boost=%d, tol=%p, boost_val=%p)\n",
        handle, info, enable_boost, tol, boost_val);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsrilu02Info_t info_native;
    int enable_boost_native = 0;
    double * tol_native = NULL;
    cuDoubleComplex * boost_val_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    enable_boost_native = (int)enable_boost;
    PointerData *tol_pointerData = initPointerData(env, tol);
    if (tol_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    tol_native = (double *)tol_pointerData->getPointer(env);
    PointerData *boost_val_pointerData = initPointerData(env, boost_val);
    if (boost_val_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    boost_val_native = (cuDoubleComplex *)boost_val_pointerData->getPointer(env);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrilu02_numericBoost(handle_native, info_native, enable_boost_native, tol_native, boost_val_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // enable_boost is primitive
    if (!releasePointerData(env, tol_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    if (!releasePointerData(env, boost_val_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXbsrilu02_1zeroPivotNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jobject position)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXbsrilu02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXbsrilu02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (position == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'position' is null for cusparseXbsrilu02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXbsrilu02_zeroPivot(handle=%p, info=%p, position=%p)\n",
        handle, info, position);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsrilu02Info_t info_native;
    int * position_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    position_native = (int *)getPointer(env, position);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXbsrilu02_zeroPivot(handle_native, info_native, position_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // position is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseSbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrilu02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrilu02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrilu02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrilu02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrilu02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrilu02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrilu02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZbsrilu02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrilu02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrilu02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseSbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrilu02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrilu02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrilu02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrilu02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrilu02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrilu02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrilu02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZbsrilu02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrilu02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsrilu02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrilu02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrilu02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrilu02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrilu02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrilu02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrilu02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrilu02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrilu02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZbsrilu02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrilu02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrilu02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descra, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseSbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsrilu02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descra=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descra, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descra_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsrilu02(handle_native, dirA_native, mb_native, nnzb_native, descra_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descra is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descra, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseDbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsrilu02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descra=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descra, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descra_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsrilu02(handle_native, dirA_native, mb_native, nnzb_native, descra_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descra is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descra, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseCbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsrilu02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descra=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descra, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descra_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsrilu02(handle_native, dirA_native, mb_native, nnzb_native, descra_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descra is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsrilu02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descra, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseZbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZbsrilu02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsrilu02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descra=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descra, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descra_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsrilu02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsrilu02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsrilu02(handle_native, dirA_native, mb_native, nnzb_native, descra_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descra is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Compute the incomplete-Cholesky factorization with 0 fill-in (IC0)
of the matrix A stored in CSR format based on the information in the opaque
structure info that was obtained from the analysis phase (csrsv_analysis).
* This routine implements algorithm 1 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsric0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseScsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsric0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (float *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsric0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsric0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseDcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsric0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (double *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsric0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsric0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseCcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsric0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (cuComplex *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsric0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsric0Native(JNIEnv *env, jclass cls, jobject handle, jint trans, jint m, jobject descrA, jobject csrSortedValA_ValM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // trans is primitive
    // m is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_ValM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_ValM' is null for cusparseZcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsric0");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsric0(handle=%p, trans=%d, m=%d, descrA=%p, csrSortedValA_ValM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p)\n",
        handle, trans, m, descrA, csrSortedValA_ValM, csrSortedRowPtrA, csrSortedColIndA, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t trans_native;
    int m_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_ValM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseSolveAnalysisInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    trans_native = (cusparseOperation_t)trans;
    m_native = (int)m;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_ValM_native = (cuDoubleComplex *)getPointer(env, csrSortedValA_ValM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (cusparseSolveAnalysisInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsric0(handle_native, trans_native, m_native, descrA_native, csrSortedValA_ValM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native);

    // Write back native variable values
    // handle is read-only
    // trans is primitive
    // m is primitive
    // descrA is read-only
    // csrSortedValA_ValM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Compute the incomplete-Cholesky factorization with 0 fill-in (IC0)
of the matrix A stored in CSR format based on the information in the opaque
structure info that was obtained from the analysis phase (csrsv2_analysis).
* This routine implements algorithm 2 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsric02_1zeroPivotNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jobject position)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsric02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXcsric02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (position == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'position' is null for cusparseXcsric02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsric02_zeroPivot(handle=%p, info=%p, position=%p)\n",
        handle, info, position);

    // Native variable declarations
    cusparseHandle_t handle_native;
    csric02Info_t info_native;
    int * position_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    position_native = (int *)getPointer(env, position);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsric02_zeroPivot(handle_native, info_native, position_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // position is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseScsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsric02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsric02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsric02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsric02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsric02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsric02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZcsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsric02_bufferSize(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsric02_bufferSize(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseScsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseScsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseScsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseScsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsric02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (float *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsric02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseDcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseDcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseDcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsric02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (double *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsric02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseCcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseCcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseCcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsric02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (cuComplex *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsric02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseZcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseZcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseZcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZcsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsric02_bufferSizeExt(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, info=%p, pBufferSize=%p)\n",
        handle, m, nnz, descrA, csrSortedVal, csrSortedRowPtr, csrSortedColInd, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    csric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedVal_native = (cuDoubleComplex *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsric02_bufferSizeExt(handle_native, m_native, nnz_native, descrA_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsric02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsric02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsric02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsric02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsric02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsric02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsric02_analysis(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsric02_analysis(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsric02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseScsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsric02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (float *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsric02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsric02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseDcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsric02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (double *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsric02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsric02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseCcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsric02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (cuComplex *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsric02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsric02Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA_valM, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA_valM == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA_valM' is null for cusparseZcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsric02(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA_valM=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, info=%p, policy=%d, pBuffer=%p)\n",
        handle, m, nnz, descrA, csrSortedValA_valM, csrSortedRowPtrA, csrSortedColIndA, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_valM_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    csric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_valM_native = (cuDoubleComplex *)getPointer(env, csrSortedValA_valM);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    info_native = (csric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsric02(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_valM_native, csrSortedRowPtrA_native, csrSortedColIndA_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA_valM is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Compute the incomplete-Cholesky factorization with 0 fill-in (IC0)
of the matrix A stored in block-CSR format based on the information in the opaque
structure info that was obtained from the analysis phase (bsrsv2_analysis).
* This routine implements algorithm 1 for this problem.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXbsric02_1zeroPivotNative(JNIEnv *env, jclass cls, jobject handle, jobject info, jobject position)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXbsric02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXbsric02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (position == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'position' is null for cusparseXbsric02_zeroPivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXbsric02_zeroPivot(handle=%p, info=%p, position=%p)\n",
        handle, info, position);

    // Native variable declarations
    cusparseHandle_t handle_native;
    bsric02Info_t info_native;
    int * position_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    position_native = (int *)getPointer(env, position);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXbsric02_zeroPivot(handle_native, info_native, position_native);

    // Write back native variable values
    // handle is read-only
    // info is read-only
    // position is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseSbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsric02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsric02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsric02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsric02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsric02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsric02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsric02_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZbsric02_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsric02_bufferSize(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsric02_bufferSize(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseSbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsric02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsric02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsric02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsric02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsric02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsric02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsric02_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockSize, jobject info, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockSize is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZbsric02_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsric02_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockSize=%d, info=%p, pBufferSize=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockSize, info, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockSize_native = 0;
    bsric02Info_t info_native;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockSize_native = (int)blockSize;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsric02_bufferSizeExt(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockSize_native, info_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockSize is primitive
    // info is read-only
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pInputBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pInputBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pInputBuffer' is null for cusparseSbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsric02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pInputBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pInputBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pInputBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pInputBuffer_native = (void *)getPointer(env, pInputBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsric02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pInputBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pInputBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pInputBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pInputBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pInputBuffer' is null for cusparseDbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsric02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pInputBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pInputBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pInputBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pInputBuffer_native = (void *)getPointer(env, pInputBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsric02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pInputBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pInputBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pInputBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pInputBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pInputBuffer' is null for cusparseCbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsric02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pInputBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pInputBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pInputBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pInputBuffer_native = (void *)getPointer(env, pInputBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsric02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pInputBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pInputBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsric02_1analysisNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pInputBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pInputBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pInputBuffer' is null for cusparseZbsric02_analysis");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsric02_analysis(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pInputBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pInputBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pInputBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pInputBuffer_native = (void *)getPointer(env, pInputBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsric02_analysis(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pInputBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pInputBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsric02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseSbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsric02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsric02(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsric02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsric02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsric02(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsric02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsric02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsric02(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsric02Native(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nnzb, jobject descrA, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint blockDim, jobject info, jint policy, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // policy is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZbsric02");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsric02(handle=%p, dirA=%d, mb=%d, nnzb=%d, descrA=%p, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, blockDim=%d, info=%p, policy=%d, pBuffer=%p)\n",
        handle, dirA, mb, nnzb, descrA, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, blockDim, info, policy, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int blockDim_native = 0;
    bsric02Info_t info_native;
    cusparseSolvePolicy_t policy_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    blockDim_native = (int)blockDim;
    info_native = (bsric02Info_t)getNativePointerValue(env, info);
    policy_native = (cusparseSolvePolicy_t)policy;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsric02(handle_native, dirA_native, mb_native, nnzb_native, descrA_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, blockDim_native, info_native, policy_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // blockDim is primitive
    // info is read-only
    // policy is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Solution of tridiagonal linear system A * X = F,
with multiple right-hand-sides. The coefficient matrix A is
composed of lower (dl), main (d) and upper (du) diagonals, and
the right-hand-sides F are overwritten with the solution X.
* These routine use pivoting.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgtsvNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseSgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseSgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseSgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseSgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgtsv(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    float * dl_native = NULL;
    float * d_native = NULL;
    float * du_native = NULL;
    float * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (float *)getPointer(env, dl);
    d_native = (float *)getPointer(env, d);
    du_native = (float *)getPointer(env, du);
    B_native = (float *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgtsv(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgtsvNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseDgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseDgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseDgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseDgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgtsv(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    double * dl_native = NULL;
    double * d_native = NULL;
    double * du_native = NULL;
    double * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (double *)getPointer(env, dl);
    d_native = (double *)getPointer(env, d);
    du_native = (double *)getPointer(env, du);
    B_native = (double *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgtsv(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgtsvNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseCgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseCgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseCgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseCgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgtsv(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cuComplex * dl_native = NULL;
    cuComplex * d_native = NULL;
    cuComplex * du_native = NULL;
    cuComplex * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (cuComplex *)getPointer(env, dl);
    d_native = (cuComplex *)getPointer(env, d);
    du_native = (cuComplex *)getPointer(env, du);
    B_native = (cuComplex *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgtsv(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgtsvNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseZgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseZgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseZgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseZgtsv");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgtsv(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cuDoubleComplex * dl_native = NULL;
    cuDoubleComplex * d_native = NULL;
    cuDoubleComplex * du_native = NULL;
    cuDoubleComplex * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (cuDoubleComplex *)getPointer(env, dl);
    d_native = (cuDoubleComplex *)getPointer(env, d);
    du_native = (cuDoubleComplex *)getPointer(env, du);
    B_native = (cuDoubleComplex *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgtsv(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Solution of tridiagonal linear system A * X = F,
with multiple right-hand-sides. The coefficient matrix A is
composed of lower (dl), main (d) and upper (du) diagonals, and
the right-hand-sides F are overwritten with the solution X.
* These routine does not use pivoting.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgtsv_1nopivotNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseSgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseSgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseSgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseSgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgtsv_nopivot(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    float * dl_native = NULL;
    float * d_native = NULL;
    float * du_native = NULL;
    float * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (float *)getPointer(env, dl);
    d_native = (float *)getPointer(env, d);
    du_native = (float *)getPointer(env, du);
    B_native = (float *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgtsv_nopivot(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgtsv_1nopivotNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseDgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseDgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseDgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseDgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgtsv_nopivot(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    double * dl_native = NULL;
    double * d_native = NULL;
    double * du_native = NULL;
    double * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (double *)getPointer(env, dl);
    d_native = (double *)getPointer(env, d);
    du_native = (double *)getPointer(env, du);
    B_native = (double *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgtsv_nopivot(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgtsv_1nopivotNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseCgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseCgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseCgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseCgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgtsv_nopivot(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cuComplex * dl_native = NULL;
    cuComplex * d_native = NULL;
    cuComplex * du_native = NULL;
    cuComplex * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (cuComplex *)getPointer(env, dl);
    d_native = (cuComplex *)getPointer(env, d);
    du_native = (cuComplex *)getPointer(env, du);
    B_native = (cuComplex *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgtsv_nopivot(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgtsv_1nopivotNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject dl, jobject d, jobject du, jobject B, jint ldb)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseZgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseZgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseZgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (B == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'B' is null for cusparseZgtsv_nopivot");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // ldb is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgtsv_nopivot(handle=%p, m=%d, n=%d, dl=%p, d=%p, du=%p, B=%p, ldb=%d)\n",
        handle, m, n, dl, d, du, B, ldb);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cuDoubleComplex * dl_native = NULL;
    cuDoubleComplex * d_native = NULL;
    cuDoubleComplex * du_native = NULL;
    cuDoubleComplex * B_native = NULL;
    int ldb_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    dl_native = (cuDoubleComplex *)getPointer(env, dl);
    d_native = (cuDoubleComplex *)getPointer(env, d);
    du_native = (cuDoubleComplex *)getPointer(env, du);
    B_native = (cuDoubleComplex *)getPointer(env, B);
    ldb_native = (int)ldb;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgtsv_nopivot(handle_native, m_native, n_native, dl_native, d_native, du_native, B_native, ldb_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // B is a native pointer
    // ldb is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/**
* <pre>
* Description: Solution of a set of tridiagonal linear systems
A_{i} * x_{i} = f_{i} for i=1,...,batchCount. The coefficient
matrices A_{i} are composed of lower (dl), main (d) and upper (du)
diagonals and stored separated by a batchStride. Also, the
* right-hand-sides/solutions f_{i}/x_{i} are separated by a batchStride.
* </pre>
*/
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgtsvStridedBatchNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject dl, jobject d, jobject du, jobject x, jint batchCount, jint batchStride)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseSgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseSgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseSgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseSgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // batchCount is primitive
    // batchStride is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgtsvStridedBatch(handle=%p, m=%d, dl=%p, d=%p, du=%p, x=%p, batchCount=%d, batchStride=%d)\n",
        handle, m, dl, d, du, x, batchCount, batchStride);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    float * dl_native = NULL;
    float * d_native = NULL;
    float * du_native = NULL;
    float * x_native = NULL;
    int batchCount_native = 0;
    int batchStride_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    dl_native = (float *)getPointer(env, dl);
    d_native = (float *)getPointer(env, d);
    du_native = (float *)getPointer(env, du);
    x_native = (float *)getPointer(env, x);
    batchCount_native = (int)batchCount;
    batchStride_native = (int)batchStride;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgtsvStridedBatch(handle_native, m_native, dl_native, d_native, du_native, x_native, batchCount_native, batchStride_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // x is a native pointer
    // batchCount is primitive
    // batchStride is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgtsvStridedBatchNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject dl, jobject d, jobject du, jobject x, jint batchCount, jint batchStride)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseDgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseDgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseDgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseDgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // batchCount is primitive
    // batchStride is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgtsvStridedBatch(handle=%p, m=%d, dl=%p, d=%p, du=%p, x=%p, batchCount=%d, batchStride=%d)\n",
        handle, m, dl, d, du, x, batchCount, batchStride);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    double * dl_native = NULL;
    double * d_native = NULL;
    double * du_native = NULL;
    double * x_native = NULL;
    int batchCount_native = 0;
    int batchStride_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    dl_native = (double *)getPointer(env, dl);
    d_native = (double *)getPointer(env, d);
    du_native = (double *)getPointer(env, du);
    x_native = (double *)getPointer(env, x);
    batchCount_native = (int)batchCount;
    batchStride_native = (int)batchStride;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgtsvStridedBatch(handle_native, m_native, dl_native, d_native, du_native, x_native, batchCount_native, batchStride_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // x is a native pointer
    // batchCount is primitive
    // batchStride is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgtsvStridedBatchNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject dl, jobject d, jobject du, jobject x, jint batchCount, jint batchStride)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseCgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseCgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseCgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseCgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // batchCount is primitive
    // batchStride is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgtsvStridedBatch(handle=%p, m=%d, dl=%p, d=%p, du=%p, x=%p, batchCount=%d, batchStride=%d)\n",
        handle, m, dl, d, du, x, batchCount, batchStride);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    cuComplex * dl_native = NULL;
    cuComplex * d_native = NULL;
    cuComplex * du_native = NULL;
    cuComplex * x_native = NULL;
    int batchCount_native = 0;
    int batchStride_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    dl_native = (cuComplex *)getPointer(env, dl);
    d_native = (cuComplex *)getPointer(env, d);
    du_native = (cuComplex *)getPointer(env, du);
    x_native = (cuComplex *)getPointer(env, x);
    batchCount_native = (int)batchCount;
    batchStride_native = (int)batchStride;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgtsvStridedBatch(handle_native, m_native, dl_native, d_native, du_native, x_native, batchCount_native, batchStride_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // x is a native pointer
    // batchCount is primitive
    // batchStride is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgtsvStridedBatchNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject dl, jobject d, jobject du, jobject x, jint batchCount, jint batchStride)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (dl == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'dl' is null for cusparseZgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (d == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'd' is null for cusparseZgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (du == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'du' is null for cusparseZgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (x == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'x' is null for cusparseZgtsvStridedBatch");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // batchCount is primitive
    // batchStride is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgtsvStridedBatch(handle=%p, m=%d, dl=%p, d=%p, du=%p, x=%p, batchCount=%d, batchStride=%d)\n",
        handle, m, dl, d, du, x, batchCount, batchStride);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    cuDoubleComplex * dl_native = NULL;
    cuDoubleComplex * d_native = NULL;
    cuDoubleComplex * du_native = NULL;
    cuDoubleComplex * x_native = NULL;
    int batchCount_native = 0;
    int batchStride_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    dl_native = (cuDoubleComplex *)getPointer(env, dl);
    d_native = (cuDoubleComplex *)getPointer(env, d);
    du_native = (cuDoubleComplex *)getPointer(env, du);
    x_native = (cuDoubleComplex *)getPointer(env, x);
    batchCount_native = (int)batchCount;
    batchStride_native = (int)batchStride;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgtsvStridedBatch(handle_native, m_native, dl_native, d_native, du_native, x_native, batchCount_native, batchStride_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // dl is a native pointer
    // d is a native pointer
    // du is a native pointer
    // x is a native pointer
    // batchCount is primitive
    // batchStride is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Level 4 routines --- */
/** Description: Compute sparse - sparse matrix multiplication for matrices
stored in CSR format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsrgemmNnzNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jobject descrA, jint nnzA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedRowPtrC, jobject nnzTotalDevHostPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseXcsrgemmNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsrgemmNnz(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, descrA=%p, nnzA=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedRowPtrC=%p, nnzTotalDevHostPtr=%p)\n",
        handle, transA, transB, m, n, k, descrA, nnzA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedRowPtrC, nnzTotalDevHostPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    int * csrSortedRowPtrC_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsrgemmNnz(handle_native, transA_native, transB_native, m_native, n_native, k_native, descrA_native, nnzA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedRowPtrC_native, nnzTotalDevHostPtr_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // descrA is read-only
    // nnzA is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedRowPtrC is a native pointer
    // nnzTotalDevHostPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrgemmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseScsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrgemm(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, transA, transB, m, n, k, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    float * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    float * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (float *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (float *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrgemm(handle_native, transA_native, transB_native, m_native, n_native, k_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrgemmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseDcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrgemm(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, transA, transB, m, n, k, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    double * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    double * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (double *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (double *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrgemm(handle_native, transA_native, transB_native, m_native, n_native, k_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrgemmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseCcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrgemm(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, transA, transB, m, n, k, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    cuComplex * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (cuComplex *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrgemm(handle_native, transA_native, transB_native, m_native, n_native, k_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrgemmNative(JNIEnv *env, jclass cls, jobject handle, jint transA, jint transB, jint m, jint n, jint k, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseZcsrgemm");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrgemm(handle=%p, transA=%d, transB=%d, m=%d, n=%d, k=%d, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, transA, transB, m, n, k, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseOperation_t transA_native;
    cusparseOperation_t transB_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    cuDoubleComplex * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    transA_native = (cusparseOperation_t)transA;
    transB_native = (cusparseOperation_t)transB;
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (cuDoubleComplex *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuDoubleComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrgemm(handle_native, transA_native, transB_native, m_native, n_native, k_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // transA is primitive
    // transB is primitive
    // m is primitive
    // n is primitive
    // k is primitive
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Compute sparse - sparse matrix multiplication for matrices
stored in CSR format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateCsrgemm2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCreateCsrgemm2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateCsrgemm2Info(info=%p)\n",
        info);

    // Native variable declarations
    csrgemm2Info_t info_native;

    // Obtain native variable values
    // info is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateCsrgemm2Info(&info_native);

    // Write back native variable values
    setNativePointerValue(env, info, (jlong)info_native);

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDestroyCsrgemm2InfoNative(JNIEnv *env, jclass cls, jobject info)
{
    // Null-checks for non-primitive arguments
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDestroyCsrgemm2Info");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDestroyCsrgemm2Info(info=%p)\n",
        info);

    // Native variable declarations
    csrgemm2Info_t info_native;

    // Obtain native variable values
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDestroyCsrgemm2Info(info_native);

    // Write back native variable values
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrgemm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseScsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrgemm2_bufferSizeExt(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedRowPtrD=%p, csrSortedColIndD=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedRowPtrD, csrSortedColIndD, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    float * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    csrgemm2Info_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrgemm2_bufferSizeExt(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrgemm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrgemm2_bufferSizeExt(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedRowPtrD=%p, csrSortedColIndD=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedRowPtrD, csrSortedColIndD, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    double * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    csrgemm2Info_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrgemm2_bufferSizeExt(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrgemm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrgemm2_bufferSizeExt(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedRowPtrD=%p, csrSortedColIndD=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedRowPtrD, csrSortedColIndD, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cuComplex * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    csrgemm2Info_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrgemm2_bufferSizeExt(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrgemm2_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZcsrgemm2_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrgemm2_bufferSizeExt(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedRowPtrD=%p, csrSortedColIndD=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedRowPtrD, csrSortedColIndD, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    csrgemm2Info_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrgemm2_bufferSizeExt(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsrgemm2NnzNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject descrA, jint nnzA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrD, jint nnzD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject descrC, jobject csrSortedRowPtrC, jobject nnzTotalDevHostPtr, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseXcsrgemm2Nnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsrgemm2Nnz(handle=%p, m=%d, n=%d, k=%d, descrA=%p, nnzA=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrD=%p, nnzD=%d, csrSortedRowPtrD=%p, csrSortedColIndD=%p, descrC=%p, csrSortedRowPtrC=%p, nnzTotalDevHostPtr=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, k, descrA, nnzA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedRowPtrB, csrSortedColIndB, descrD, nnzD, csrSortedRowPtrD, csrSortedColIndD, descrC, csrSortedRowPtrC, nnzTotalDevHostPtr, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    cusparseMatDescr_t descrC_native;
    int * csrSortedRowPtrC_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;
    csrgemm2Info_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsrgemm2Nnz(handle_native, m_native, n_native, k_native, descrA_native, nnzA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrD_native, nnzD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, descrC_native, csrSortedRowPtrC_native, nnzTotalDevHostPtr_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    // descrA is read-only
    // nnzA is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrD is read-only
    // nnzD is primitive
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // descrC is read-only
    // csrSortedRowPtrC is a native pointer
    // nnzTotalDevHostPtr is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrgemm2Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedValD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedValD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValD' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrgemm2(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedValD=%p, csrSortedRowPtrD=%p, csrSortedColIndD=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedValD, csrSortedRowPtrD, csrSortedColIndD, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    float * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    float * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    float * csrSortedValD_native = NULL;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    cusparseMatDescr_t descrC_native;
    float * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;
    csrgemm2Info_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (float *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedValD_native = (float *)getPointer(env, csrSortedValD);
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (float *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrgemm2(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedValD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedValD is a native pointer
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrgemm2Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedValD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedValD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValD' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrgemm2(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedValD=%p, csrSortedRowPtrD=%p, csrSortedColIndD=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedValD, csrSortedRowPtrD, csrSortedColIndD, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    double * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    double * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    double * csrSortedValD_native = NULL;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    cusparseMatDescr_t descrC_native;
    double * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;
    csrgemm2Info_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (double *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedValD_native = (double *)getPointer(env, csrSortedValD);
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (double *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrgemm2(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedValD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedValD is a native pointer
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrgemm2Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedValD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedValD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValD' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrgemm2(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedValD=%p, csrSortedRowPtrD=%p, csrSortedColIndD=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedValD, csrSortedRowPtrD, csrSortedColIndD, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    cuComplex * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cuComplex * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    cuComplex * csrSortedValD_native = NULL;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;
    csrgemm2Info_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (cuComplex *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedValD_native = (cuComplex *)getPointer(env, csrSortedValD);
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrgemm2(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedValD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedValD is a native pointer
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrgemm2Native(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint k, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject beta, jobject descrD, jint nnzD, jobject csrSortedValD, jobject csrSortedRowPtrD, jobject csrSortedColIndD, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // k is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrD' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzD is primitive
    if (csrSortedValD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValD' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrD' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndD == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndD' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsrgemm2");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrgemm2(handle=%p, m=%d, n=%d, k=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, beta=%p, descrD=%p, nnzD=%d, csrSortedValD=%p, csrSortedRowPtrD=%p, csrSortedColIndD=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, k, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, beta, descrD, nnzD, csrSortedValD, csrSortedRowPtrD, csrSortedColIndD, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int k_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    cuDoubleComplex * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cusparseMatDescr_t descrD_native;
    int nnzD_native = 0;
    cuDoubleComplex * csrSortedValD_native = NULL;
    int * csrSortedRowPtrD_native = NULL;
    int * csrSortedColIndD_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;
    csrgemm2Info_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    k_native = (int)k;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (cuDoubleComplex *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    descrD_native = (cusparseMatDescr_t)getNativePointerValue(env, descrD);
    nnzD_native = (int)nnzD;
    csrSortedValD_native = (cuDoubleComplex *)getPointer(env, csrSortedValD);
    csrSortedRowPtrD_native = (int *)getPointer(env, csrSortedRowPtrD);
    csrSortedColIndD_native = (int *)getPointer(env, csrSortedColIndD);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuDoubleComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);
    info_native = (csrgemm2Info_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrgemm2(handle_native, m_native, n_native, k_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, beta_native, descrD_native, nnzD_native, csrSortedValD_native, csrSortedRowPtrD_native, csrSortedColIndD_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // k is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrD is read-only
    // nnzD is primitive
    // csrSortedValD is a native pointer
    // csrSortedRowPtrD is a native pointer
    // csrSortedColIndD is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Compute sparse - sparse matrix addition of matrices
stored in CSR format */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsrgeamNnzNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jint nnzA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrB, jint nnzB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedRowPtrC, jobject nnzTotalDevHostPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseXcsrgeamNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsrgeamNnz(handle=%p, m=%d, n=%d, descrA=%p, nnzA=%d, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrB=%p, nnzB=%d, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedRowPtrC=%p, nnzTotalDevHostPtr=%p)\n",
        handle, m, n, descrA, nnzA, csrSortedRowPtrA, csrSortedColIndA, descrB, nnzB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedRowPtrC, nnzTotalDevHostPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    int * csrSortedRowPtrC_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsrgeamNnz(handle_native, m_native, n_native, descrA_native, nnzA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrB_native, nnzB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedRowPtrC_native, nnzTotalDevHostPtr_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // nnzA is primitive
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrB is read-only
    // nnzB is primitive
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedRowPtrC is a native pointer
    // nnzTotalDevHostPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrgeamNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject beta, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseScsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrgeam(handle=%p, m=%d, n=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, beta=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, m, n, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, beta, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    float * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * beta_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    float * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    float * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (float *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (float *)beta_pointerData->getPointer(env);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (float *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (float *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrgeam(handle_native, m_native, n_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, beta_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrgeamNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject beta, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseDcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrgeam(handle=%p, m=%d, n=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, beta=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, m, n, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, beta, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    double * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * beta_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    double * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    double * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (double *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (double *)beta_pointerData->getPointer(env);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (double *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (double *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrgeam(handle_native, m_native, n_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, beta_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrgeamNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject beta, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseCcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrgeam(handle=%p, m=%d, n=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, beta=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, m, n, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, beta, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cuComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuComplex * beta_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    cuComplex * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuComplex *)beta_pointerData->getPointer(env);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (cuComplex *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrgeam(handle_native, m_native, n_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, beta_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrgeamNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject alpha, jobject descrA, jint nnzA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject beta, jobject descrB, jint nnzB, jobject csrSortedValB, jobject csrSortedRowPtrB, jobject csrSortedColIndB, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (alpha == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'alpha' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzA is primitive
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (beta == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'beta' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrB' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnzB is primitive
    if (csrSortedValB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValB' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrB' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndB == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndB' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseZcsrgeam");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrgeam(handle=%p, m=%d, n=%d, alpha=%p, descrA=%p, nnzA=%d, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, beta=%p, descrB=%p, nnzB=%d, csrSortedValB=%p, csrSortedRowPtrB=%p, csrSortedColIndB=%p, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, m, n, alpha, descrA, nnzA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, beta, descrB, nnzB, csrSortedValB, csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cuDoubleComplex * alpha_native = NULL;
    cusparseMatDescr_t descrA_native;
    int nnzA_native = 0;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuDoubleComplex * beta_native = NULL;
    cusparseMatDescr_t descrB_native;
    int nnzB_native = 0;
    cuDoubleComplex * csrSortedValB_native = NULL;
    int * csrSortedRowPtrB_native = NULL;
    int * csrSortedColIndB_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    PointerData *alpha_pointerData = initPointerData(env, alpha);
    if (alpha_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    alpha_native = (cuDoubleComplex *)alpha_pointerData->getPointer(env);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    nnzA_native = (int)nnzA;
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    PointerData *beta_pointerData = initPointerData(env, beta);
    if (beta_pointerData == NULL)
    {
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    beta_native = (cuDoubleComplex *)beta_pointerData->getPointer(env);
    descrB_native = (cusparseMatDescr_t)getNativePointerValue(env, descrB);
    nnzB_native = (int)nnzB;
    csrSortedValB_native = (cuDoubleComplex *)getPointer(env, csrSortedValB);
    csrSortedRowPtrB_native = (int *)getPointer(env, csrSortedRowPtrB);
    csrSortedColIndB_native = (int *)getPointer(env, csrSortedColIndB);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuDoubleComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrgeam(handle_native, m_native, n_native, alpha_native, descrA_native, nnzA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, beta_native, descrB_native, nnzB_native, csrSortedValB_native, csrSortedRowPtrB_native, csrSortedColIndB_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    if (!releasePointerData(env, alpha_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrA is read-only
    // nnzA is primitive
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    if (!releasePointerData(env, beta_pointerData, JNI_ABORT)) return JCUSPARSE_STATUS_INTERNAL_ERROR;
    // descrB is read-only
    // nnzB is primitive
    // csrSortedValB is a native pointer
    // csrSortedRowPtrB is a native pointer
    // csrSortedColIndB is a native pointer
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Matrix Reorderings --- */
/** Description: Find an approximate coloring of a matrix stored in CSR format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsrcolorNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject fractionToColor, jobject ncolors, jobject coloring, jobject reordering, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (fractionToColor == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'fractionToColor' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (ncolors == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'ncolors' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (coloring == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'coloring' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (reordering == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'reordering' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsrcolor(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, fractionToColor=%p, ncolors=%p, coloring=%p, reordering=%p, info=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, fractionToColor, ncolors, coloring, reordering, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * fractionToColor_native = NULL;
    int * ncolors_native = NULL;
    int * coloring_native = NULL;
    int * reordering_native = NULL;
    cusparseColorInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    fractionToColor_native = (float *)getPointer(env, fractionToColor);
    ncolors_native = (int *)getPointer(env, ncolors);
    coloring_native = (int *)getPointer(env, coloring);
    reordering_native = (int *)getPointer(env, reordering);
    info_native = (cusparseColorInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsrcolor(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, fractionToColor_native, ncolors_native, coloring_native, reordering_native, info_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // fractionToColor is a native pointer
    // ncolors is a native pointer
    // coloring is a native pointer
    // reordering is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsrcolorNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject fractionToColor, jobject ncolors, jobject coloring, jobject reordering, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (fractionToColor == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'fractionToColor' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (ncolors == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'ncolors' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (coloring == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'coloring' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (reordering == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'reordering' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsrcolor(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, fractionToColor=%p, ncolors=%p, coloring=%p, reordering=%p, info=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, fractionToColor, ncolors, coloring, reordering, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * fractionToColor_native = NULL;
    int * ncolors_native = NULL;
    int * coloring_native = NULL;
    int * reordering_native = NULL;
    cusparseColorInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    fractionToColor_native = (double *)getPointer(env, fractionToColor);
    ncolors_native = (int *)getPointer(env, ncolors);
    coloring_native = (int *)getPointer(env, coloring);
    reordering_native = (int *)getPointer(env, reordering);
    info_native = (cusparseColorInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsrcolor(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, fractionToColor_native, ncolors_native, coloring_native, reordering_native, info_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // fractionToColor is a native pointer
    // ncolors is a native pointer
    // coloring is a native pointer
    // reordering is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsrcolorNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject fractionToColor, jobject ncolors, jobject coloring, jobject reordering, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (fractionToColor == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'fractionToColor' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (ncolors == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'ncolors' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (coloring == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'coloring' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (reordering == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'reordering' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsrcolor(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, fractionToColor=%p, ncolors=%p, coloring=%p, reordering=%p, info=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, fractionToColor, ncolors, coloring, reordering, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * fractionToColor_native = NULL;
    int * ncolors_native = NULL;
    int * coloring_native = NULL;
    int * reordering_native = NULL;
    cusparseColorInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    fractionToColor_native = (float *)getPointer(env, fractionToColor);
    ncolors_native = (int *)getPointer(env, ncolors);
    coloring_native = (int *)getPointer(env, coloring);
    reordering_native = (int *)getPointer(env, reordering);
    info_native = (cusparseColorInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsrcolor(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, fractionToColor_native, ncolors_native, coloring_native, reordering_native, info_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // fractionToColor is a native pointer
    // ncolors is a native pointer
    // coloring is a native pointer
    // reordering is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsrcolorNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint nnz, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject fractionToColor, jobject ncolors, jobject coloring, jobject reordering, jobject info)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (fractionToColor == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'fractionToColor' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (ncolors == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'ncolors' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (coloring == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'coloring' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (reordering == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'reordering' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsrcolor");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsrcolor(handle=%p, m=%d, nnz=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, fractionToColor=%p, ncolors=%p, coloring=%p, reordering=%p, info=%p)\n",
        handle, m, nnz, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, fractionToColor, ncolors, coloring, reordering, info);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * fractionToColor_native = NULL;
    int * ncolors_native = NULL;
    int * coloring_native = NULL;
    int * reordering_native = NULL;
    cusparseColorInfo_t info_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    fractionToColor_native = (double *)getPointer(env, fractionToColor);
    ncolors_native = (int *)getPointer(env, ncolors);
    coloring_native = (int *)getPointer(env, coloring);
    reordering_native = (int *)getPointer(env, reordering);
    info_native = (cusparseColorInfo_t)getNativePointerValue(env, info);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsrcolor(handle_native, m_native, nnz_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, fractionToColor_native, ncolors_native, coloring_native, reordering_native, info_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // nnz is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // fractionToColor is a native pointer
    // ncolors is a native pointer
    // coloring is a native pointer
    // reordering is a native pointer
    // info is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Format Conversion --- */
/** Description: This routine finds the total number of non-zero elements and
the number of non-zero elements per row or column in the dense matrix A. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSnnzNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRowCol, jobject nnzTotalDevHostPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseSnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRowCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRowCol' is null for cusparseSnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseSnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSnnz(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRowCol=%p, nnzTotalDevHostPtr=%p)\n",
        handle, dirA, m, n, descrA, A, lda, nnzPerRowCol, nnzTotalDevHostPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRowCol_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRowCol_native = (int *)getPointer(env, nnzPerRowCol);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSnnz(handle_native, dirA_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRowCol_native, nnzTotalDevHostPtr_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRowCol is a native pointer
    // nnzTotalDevHostPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDnnzNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRowCol, jobject nnzTotalDevHostPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRowCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRowCol' is null for cusparseDnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseDnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDnnz(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRowCol=%p, nnzTotalDevHostPtr=%p)\n",
        handle, dirA, m, n, descrA, A, lda, nnzPerRowCol, nnzTotalDevHostPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRowCol_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRowCol_native = (int *)getPointer(env, nnzPerRowCol);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDnnz(handle_native, dirA_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRowCol_native, nnzTotalDevHostPtr_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRowCol is a native pointer
    // nnzTotalDevHostPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCnnzNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRowCol, jobject nnzTotalDevHostPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRowCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRowCol' is null for cusparseCnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseCnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCnnz(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRowCol=%p, nnzTotalDevHostPtr=%p)\n",
        handle, dirA, m, n, descrA, A, lda, nnzPerRowCol, nnzTotalDevHostPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRowCol_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRowCol_native = (int *)getPointer(env, nnzPerRowCol);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCnnz(handle_native, dirA_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRowCol_native, nnzTotalDevHostPtr_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRowCol is a native pointer
    // nnzTotalDevHostPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZnnzNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRowCol, jobject nnzTotalDevHostPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRowCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRowCol' is null for cusparseZnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseZnnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZnnz(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRowCol=%p, nnzTotalDevHostPtr=%p)\n",
        handle, dirA, m, n, descrA, A, lda, nnzPerRowCol, nnzTotalDevHostPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRowCol_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRowCol_native = (int *)getPointer(env, nnzPerRowCol);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZnnz(handle_native, dirA_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRowCol_native, nnzTotalDevHostPtr_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRowCol is a native pointer
    // nnzTotalDevHostPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Format Conversion --- */
/** Description: This routine finds the total number of non-zero elements and
the number of non-zero elements per row in a noncompressed csr matrix A. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSnnz_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject descr, jobject values, jobject rowPtr, jobject nnzPerRow, jobject nnzTotal, jfloat tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (descr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descr' is null for cusparseSnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (values == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'values' is null for cusparseSnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (rowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'rowPtr' is null for cusparseSnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseSnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotal' is null for cusparseSnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // tol is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSnnz_compress(handle=%p, m=%d, descr=%p, values=%p, rowPtr=%p, nnzPerRow=%p, nnzTotal=%p, tol=%f)\n",
        handle, m, descr, values, rowPtr, nnzPerRow, nnzTotal, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    cusparseMatDescr_t descr_native;
    float * values_native = NULL;
    int * rowPtr_native = NULL;
    int * nnzPerRow_native = NULL;
    int * nnzTotal_native = NULL;
    float tol_native = 0.0f;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    descr_native = (cusparseMatDescr_t)getNativePointerValue(env, descr);
    values_native = (float *)getPointer(env, values);
    rowPtr_native = (int *)getPointer(env, rowPtr);
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    nnzTotal_native = (int *)getPointer(env, nnzTotal);
    tol_native = (float)tol;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSnnz_compress(handle_native, m_native, descr_native, values_native, rowPtr_native, nnzPerRow_native, nnzTotal_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // descr is read-only
    // values is a native pointer
    // rowPtr is a native pointer
    // nnzPerRow is a native pointer
    // nnzTotal is a native pointer
    // tol is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDnnz_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject descr, jobject values, jobject rowPtr, jobject nnzPerRow, jobject nnzTotal, jdouble tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (descr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descr' is null for cusparseDnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (values == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'values' is null for cusparseDnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (rowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'rowPtr' is null for cusparseDnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseDnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotal' is null for cusparseDnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // tol is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDnnz_compress(handle=%p, m=%d, descr=%p, values=%p, rowPtr=%p, nnzPerRow=%p, nnzTotal=%p, tol=%lf)\n",
        handle, m, descr, values, rowPtr, nnzPerRow, nnzTotal, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    cusparseMatDescr_t descr_native;
    double * values_native = NULL;
    int * rowPtr_native = NULL;
    int * nnzPerRow_native = NULL;
    int * nnzTotal_native = NULL;
    double tol_native = 0.0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    descr_native = (cusparseMatDescr_t)getNativePointerValue(env, descr);
    values_native = (double *)getPointer(env, values);
    rowPtr_native = (int *)getPointer(env, rowPtr);
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    nnzTotal_native = (int *)getPointer(env, nnzTotal);
    tol_native = (double)tol;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDnnz_compress(handle_native, m_native, descr_native, values_native, rowPtr_native, nnzPerRow_native, nnzTotal_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // descr is read-only
    // values is a native pointer
    // rowPtr is a native pointer
    // nnzPerRow is a native pointer
    // nnzTotal is a native pointer
    // tol is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCnnz_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject descr, jobject values, jobject rowPtr, jobject nnzPerRow, jobject nnzTotal, jobject tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (descr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descr' is null for cusparseCnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (values == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'values' is null for cusparseCnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (rowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'rowPtr' is null for cusparseCnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseCnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotal' is null for cusparseCnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseCnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCnnz_compress(handle=%p, m=%d, descr=%p, values=%p, rowPtr=%p, nnzPerRow=%p, nnzTotal=%p, tol=%p)\n",
        handle, m, descr, values, rowPtr, nnzPerRow, nnzTotal, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    cusparseMatDescr_t descr_native;
    cuComplex * values_native = NULL;
    int * rowPtr_native = NULL;
    int * nnzPerRow_native = NULL;
    int * nnzTotal_native = NULL;
    cuComplex tol_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    descr_native = (cusparseMatDescr_t)getNativePointerValue(env, descr);
    values_native = (cuComplex *)getPointer(env, values);
    rowPtr_native = (int *)getPointer(env, rowPtr);
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    nnzTotal_native = (int *)getPointer(env, nnzTotal);
    if (!initNative(env, tol, tol_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCnnz_compress(handle_native, m_native, descr_native, values_native, rowPtr_native, nnzPerRow_native, nnzTotal_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // descr is read-only
    // values is a native pointer
    // rowPtr is a native pointer
    // nnzPerRow is a native pointer
    // nnzTotal is a native pointer
    // tol is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZnnz_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jobject descr, jobject values, jobject rowPtr, jobject nnzPerRow, jobject nnzTotal, jobject tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    if (descr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descr' is null for cusparseZnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (values == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'values' is null for cusparseZnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (rowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'rowPtr' is null for cusparseZnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseZnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotal' is null for cusparseZnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseZnnz_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZnnz_compress(handle=%p, m=%d, descr=%p, values=%p, rowPtr=%p, nnzPerRow=%p, nnzTotal=%p, tol=%p)\n",
        handle, m, descr, values, rowPtr, nnzPerRow, nnzTotal, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    cusparseMatDescr_t descr_native;
    cuDoubleComplex * values_native = NULL;
    int * rowPtr_native = NULL;
    int * nnzPerRow_native = NULL;
    int * nnzTotal_native = NULL;
    cuDoubleComplex tol_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    descr_native = (cusparseMatDescr_t)getNativePointerValue(env, descr);
    values_native = (cuDoubleComplex *)getPointer(env, values);
    rowPtr_native = (int *)getPointer(env, rowPtr);
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    nnzTotal_native = (int *)getPointer(env, nnzTotal);
    if (!initNative(env, tol, tol_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZnnz_compress(handle_native, m_native, descr_native, values_native, rowPtr_native, nnzPerRow_native, nnzTotal_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // descr is read-only
    // values is a native pointer
    // rowPtr is a native pointer
    // nnzPerRow is a native pointer
    // nnzTotal is a native pointer
    // tol is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine takes as input a csr form where the values may have 0 elements
and compresses it to return a csr form with no zeros. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2csr_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descra, jobject inVal, jobject inColInd, jobject inRowPtr, jint inNnz, jobject nnzPerRow, jobject outVal, jobject outColInd, jobject outRowPtr, jfloat tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inVal' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inColInd' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inRowPtr' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // inNnz is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outVal' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outColInd' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outRowPtr' is null for cusparseScsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // tol is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2csr_compress(handle=%p, m=%d, n=%d, descra=%p, inVal=%p, inColInd=%p, inRowPtr=%p, inNnz=%d, nnzPerRow=%p, outVal=%p, outColInd=%p, outRowPtr=%p, tol=%f)\n",
        handle, m, n, descra, inVal, inColInd, inRowPtr, inNnz, nnzPerRow, outVal, outColInd, outRowPtr, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descra_native;
    float * inVal_native = NULL;
    int * inColInd_native = NULL;
    int * inRowPtr_native = NULL;
    int inNnz_native = 0;
    int * nnzPerRow_native = NULL;
    float * outVal_native = NULL;
    int * outColInd_native = NULL;
    int * outRowPtr_native = NULL;
    float tol_native = 0.0f;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    inVal_native = (float *)getPointer(env, inVal);
    inColInd_native = (int *)getPointer(env, inColInd);
    inRowPtr_native = (int *)getPointer(env, inRowPtr);
    inNnz_native = (int)inNnz;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    outVal_native = (float *)getPointer(env, outVal);
    outColInd_native = (int *)getPointer(env, outColInd);
    outRowPtr_native = (int *)getPointer(env, outRowPtr);
    tol_native = (float)tol;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2csr_compress(handle_native, m_native, n_native, descra_native, inVal_native, inColInd_native, inRowPtr_native, inNnz_native, nnzPerRow_native, outVal_native, outColInd_native, outRowPtr_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descra is read-only
    // inVal is a native pointer
    // inColInd is a native pointer
    // inRowPtr is a native pointer
    // inNnz is primitive
    // nnzPerRow is a native pointer
    // outVal is a native pointer
    // outColInd is a native pointer
    // outRowPtr is a native pointer
    // tol is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2csr_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descra, jobject inVal, jobject inColInd, jobject inRowPtr, jint inNnz, jobject nnzPerRow, jobject outVal, jobject outColInd, jobject outRowPtr, jdouble tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inVal' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inColInd' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inRowPtr' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // inNnz is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outVal' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outColInd' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outRowPtr' is null for cusparseDcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // tol is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2csr_compress(handle=%p, m=%d, n=%d, descra=%p, inVal=%p, inColInd=%p, inRowPtr=%p, inNnz=%d, nnzPerRow=%p, outVal=%p, outColInd=%p, outRowPtr=%p, tol=%lf)\n",
        handle, m, n, descra, inVal, inColInd, inRowPtr, inNnz, nnzPerRow, outVal, outColInd, outRowPtr, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descra_native;
    double * inVal_native = NULL;
    int * inColInd_native = NULL;
    int * inRowPtr_native = NULL;
    int inNnz_native = 0;
    int * nnzPerRow_native = NULL;
    double * outVal_native = NULL;
    int * outColInd_native = NULL;
    int * outRowPtr_native = NULL;
    double tol_native = 0.0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    inVal_native = (double *)getPointer(env, inVal);
    inColInd_native = (int *)getPointer(env, inColInd);
    inRowPtr_native = (int *)getPointer(env, inRowPtr);
    inNnz_native = (int)inNnz;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    outVal_native = (double *)getPointer(env, outVal);
    outColInd_native = (int *)getPointer(env, outColInd);
    outRowPtr_native = (int *)getPointer(env, outRowPtr);
    tol_native = (double)tol;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2csr_compress(handle_native, m_native, n_native, descra_native, inVal_native, inColInd_native, inRowPtr_native, inNnz_native, nnzPerRow_native, outVal_native, outColInd_native, outRowPtr_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descra is read-only
    // inVal is a native pointer
    // inColInd is a native pointer
    // inRowPtr is a native pointer
    // inNnz is primitive
    // nnzPerRow is a native pointer
    // outVal is a native pointer
    // outColInd is a native pointer
    // outRowPtr is a native pointer
    // tol is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2csr_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descra, jobject inVal, jobject inColInd, jobject inRowPtr, jint inNnz, jobject nnzPerRow, jobject outVal, jobject outColInd, jobject outRowPtr, jobject tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inVal' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inColInd' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inRowPtr' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // inNnz is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outVal' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outColInd' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outRowPtr' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseCcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2csr_compress(handle=%p, m=%d, n=%d, descra=%p, inVal=%p, inColInd=%p, inRowPtr=%p, inNnz=%d, nnzPerRow=%p, outVal=%p, outColInd=%p, outRowPtr=%p, tol=%p)\n",
        handle, m, n, descra, inVal, inColInd, inRowPtr, inNnz, nnzPerRow, outVal, outColInd, outRowPtr, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descra_native;
    cuComplex * inVal_native = NULL;
    int * inColInd_native = NULL;
    int * inRowPtr_native = NULL;
    int inNnz_native = 0;
    int * nnzPerRow_native = NULL;
    cuComplex * outVal_native = NULL;
    int * outColInd_native = NULL;
    int * outRowPtr_native = NULL;
    cuComplex tol_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    inVal_native = (cuComplex *)getPointer(env, inVal);
    inColInd_native = (int *)getPointer(env, inColInd);
    inRowPtr_native = (int *)getPointer(env, inRowPtr);
    inNnz_native = (int)inNnz;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    outVal_native = (cuComplex *)getPointer(env, outVal);
    outColInd_native = (int *)getPointer(env, outColInd);
    outRowPtr_native = (int *)getPointer(env, outRowPtr);
    if (!initNative(env, tol, tol_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2csr_compress(handle_native, m_native, n_native, descra_native, inVal_native, inColInd_native, inRowPtr_native, inNnz_native, nnzPerRow_native, outVal_native, outColInd_native, outRowPtr_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descra is read-only
    // inVal is a native pointer
    // inColInd is a native pointer
    // inRowPtr is a native pointer
    // inNnz is primitive
    // nnzPerRow is a native pointer
    // outVal is a native pointer
    // outColInd is a native pointer
    // outRowPtr is a native pointer
    // tol is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2csr_1compressNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descra, jobject inVal, jobject inColInd, jobject inRowPtr, jint inNnz, jobject nnzPerRow, jobject outVal, jobject outColInd, jobject outRowPtr, jobject tol)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descra == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descra' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inVal' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inColInd' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (inRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'inRowPtr' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // inNnz is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outVal' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outColInd' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (outRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'outRowPtr' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (tol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'tol' is null for cusparseZcsr2csr_compress");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2csr_compress(handle=%p, m=%d, n=%d, descra=%p, inVal=%p, inColInd=%p, inRowPtr=%p, inNnz=%d, nnzPerRow=%p, outVal=%p, outColInd=%p, outRowPtr=%p, tol=%p)\n",
        handle, m, n, descra, inVal, inColInd, inRowPtr, inNnz, nnzPerRow, outVal, outColInd, outRowPtr, tol);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descra_native;
    cuDoubleComplex * inVal_native = NULL;
    int * inColInd_native = NULL;
    int * inRowPtr_native = NULL;
    int inNnz_native = 0;
    int * nnzPerRow_native = NULL;
    cuDoubleComplex * outVal_native = NULL;
    int * outColInd_native = NULL;
    int * outRowPtr_native = NULL;
    cuDoubleComplex tol_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descra_native = (cusparseMatDescr_t)getNativePointerValue(env, descra);
    inVal_native = (cuDoubleComplex *)getPointer(env, inVal);
    inColInd_native = (int *)getPointer(env, inColInd);
    inRowPtr_native = (int *)getPointer(env, inRowPtr);
    inNnz_native = (int)inNnz;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    outVal_native = (cuDoubleComplex *)getPointer(env, outVal);
    outColInd_native = (int *)getPointer(env, outColInd);
    outRowPtr_native = (int *)getPointer(env, outRowPtr);
    if (!initNative(env, tol, tol_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2csr_compress(handle_native, m_native, n_native, descra_native, inVal_native, inColInd_native, inRowPtr_native, inNnz_native, nnzPerRow_native, outVal_native, outColInd_native, outRowPtr_native, tol_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descra is read-only
    // inVal is a native pointer
    // inColInd is a native pointer
    // inRowPtr is a native pointer
    // inNnz is primitive
    // nnzPerRow is a native pointer
    // outVal is a native pointer
    // outColInd is a native pointer
    // outRowPtr is a native pointer
    // tol is read-only

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a dense matrix to a sparse matrix
in the CSR storage format, using the information computed by the
nnz routine. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSdense2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseSdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseSdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseSdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseSdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseSdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSdense2csr(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSdense2csr(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDdense2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseDdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDdense2csr(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDdense2csr(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCdense2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseCdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCdense2csr(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCdense2csr(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZdense2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseZdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZdense2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZdense2csr(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZdense2csr(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in CSR storage format
to a dense matrix. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseScsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2dense(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    float * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2dense(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2dense(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    double * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2dense(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2dense(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuComplex * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2dense(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZcsr2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2dense(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2dense(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a dense matrix to a sparse matrix
in the CSC storage format, using the information computed by the
nnz routine. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSdense2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerCol, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseSdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerCol' is null for cusparseSdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseSdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseSdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseSdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSdense2csc(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerCol=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerCol, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * A_native = NULL;
    int lda_native = 0;
    int * nnzPerCol_native = NULL;
    float * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerCol_native = (int *)getPointer(env, nnzPerCol);
    cscSortedValA_native = (float *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSdense2csc(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerCol_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerCol is a native pointer
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDdense2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerCol, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerCol' is null for cusparseDdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseDdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseDdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseDdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDdense2csc(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerCol=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerCol, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * A_native = NULL;
    int lda_native = 0;
    int * nnzPerCol_native = NULL;
    double * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerCol_native = (int *)getPointer(env, nnzPerCol);
    cscSortedValA_native = (double *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDdense2csc(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerCol_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerCol is a native pointer
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCdense2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerCol, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerCol' is null for cusparseCdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseCdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseCdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseCdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCdense2csc(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerCol=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerCol, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerCol_native = NULL;
    cuComplex * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerCol_native = (int *)getPointer(env, nnzPerCol);
    cscSortedValA_native = (cuComplex *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCdense2csc(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerCol_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerCol is a native pointer
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZdense2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerCol, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerCol == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerCol' is null for cusparseZdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseZdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseZdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseZdense2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZdense2csc(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerCol=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p)\n",
        handle, m, n, descrA, A, lda, nnzPerCol, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerCol_native = NULL;
    cuDoubleComplex * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerCol_native = (int *)getPointer(env, nnzPerCol);
    cscSortedValA_native = (cuDoubleComplex *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZdense2csc(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerCol_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerCol is a native pointer
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in CSC storage format
to a dense matrix. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsc2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseScsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseScsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseScsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseScsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsc2dense(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    float * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (float *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsc2dense(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsc2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseDcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseDcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseDcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsc2dense(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    double * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (double *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsc2dense(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsc2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseCcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseCcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseCcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsc2dense(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    cuComplex * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (cuComplex *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsc2dense(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsc2denseNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseZcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseZcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseZcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZcsc2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsc2dense(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, A=%p, lda=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (cuDoubleComplex *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsc2dense(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine compresses the indecis of rows or columns.
It can be interpreted as a conversion from COO to CSR sparse storage
format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcoo2csrNative(JNIEnv *env, jclass cls, jobject handle, jobject cooRowInd, jint nnz, jint m, jobject csrSortedRowPtr, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcoo2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cooRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooRowInd' is null for cusparseXcoo2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    // m is primitive
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseXcoo2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcoo2csr(handle=%p, cooRowInd=%p, nnz=%d, m=%d, csrSortedRowPtr=%p, idxBase=%d)\n",
        handle, cooRowInd, nnz, m, csrSortedRowPtr, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int * cooRowInd_native = NULL;
    int nnz_native = 0;
    int m_native = 0;
    int * csrSortedRowPtr_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    cooRowInd_native = (int *)getPointer(env, cooRowInd);
    nnz_native = (int)nnz;
    m_native = (int)m;
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcoo2csr(handle_native, cooRowInd_native, nnz_native, m_native, csrSortedRowPtr_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // cooRowInd is a native pointer
    // nnz is primitive
    // m is primitive
    // csrSortedRowPtr is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine uncompresses the indecis of rows or columns.
It can be interpreted as a conversion from CSR to COO sparse storage
format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsr2cooNative(JNIEnv *env, jclass cls, jobject handle, jobject csrSortedRowPtr, jint nnz, jint m, jobject cooRowInd, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsr2coo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseXcsr2coo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // nnz is primitive
    // m is primitive
    if (cooRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooRowInd' is null for cusparseXcsr2coo");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsr2coo(handle=%p, csrSortedRowPtr=%p, nnz=%d, m=%d, cooRowInd=%p, idxBase=%d)\n",
        handle, csrSortedRowPtr, nnz, m, cooRowInd, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int * csrSortedRowPtr_native = NULL;
    int nnz_native = 0;
    int m_native = 0;
    int * cooRowInd_native = NULL;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    nnz_native = (int)nnz;
    m_native = (int)m;
    cooRowInd_native = (int *)getPointer(env, cooRowInd);
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsr2coo(handle_native, csrSortedRowPtr_native, nnz_native, m_native, cooRowInd_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // csrSortedRowPtr is a native pointer
    // nnz is primitive
    // m is primitive
    // cooRowInd is a native pointer
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a matrix from CSR to CSC sparse
storage format. The resulting matrix can be re-interpreted as a
transpose of the original matrix in CSR storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCsr2cscExNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrSortedVal, jint csrSortedValtype, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject cscSortedVal, jint cscSortedValtype, jobject cscSortedRowInd, jobject cscSortedColPtr, jint copyValues, jint idxBase, jint executiontype)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCsr2cscEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseCsr2cscEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // csrSortedValtype is primitive
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseCsr2cscEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseCsr2cscEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseCsr2cscEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // cscSortedValtype is primitive
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseCsr2cscEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseCsr2cscEx");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // idxBase is primitive
    // executiontype is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCsr2cscEx(handle=%p, m=%d, n=%d, nnz=%d, csrSortedVal=%p, csrSortedValtype=%d, csrSortedRowPtr=%p, csrSortedColInd=%p, cscSortedVal=%p, cscSortedValtype=%d, cscSortedRowInd=%p, cscSortedColPtr=%p, copyValues=%d, idxBase=%d, executiontype=%d)\n",
        handle, m, n, nnz, csrSortedVal, csrSortedValtype, csrSortedRowPtr, csrSortedColInd, cscSortedVal, cscSortedValtype, cscSortedRowInd, cscSortedColPtr, copyValues, idxBase, executiontype);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    void * csrSortedVal_native = NULL;
    cudaDataType csrSortedValtype_native;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    void * cscSortedVal_native = NULL;
    cudaDataType cscSortedValtype_native;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t idxBase_native;
    cudaDataType executiontype_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrSortedVal_native = (void *)getPointer(env, csrSortedVal);
    csrSortedValtype_native = (cudaDataType)csrSortedValtype;
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    cscSortedVal_native = (void *)getPointer(env, cscSortedVal);
    cscSortedValtype_native = (cudaDataType)cscSortedValtype;
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    idxBase_native = (cusparseIndexBase_t)idxBase;
    executiontype_native = (cudaDataType)executiontype;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCsr2cscEx(handle_native, m_native, n_native, nnz_native, csrSortedVal_native, csrSortedValtype_native, csrSortedRowPtr_native, csrSortedColInd_native, cscSortedVal_native, cscSortedValtype_native, cscSortedRowInd_native, cscSortedColPtr_native, copyValues_native, idxBase_native, executiontype_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrSortedVal is a native pointer
    // csrSortedValtype is primitive
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // cscSortedVal is a native pointer
    // cscSortedValtype is primitive
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer
    // copyValues is primitive
    // idxBase is primitive
    // executiontype is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr, jint copyValues, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseScsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseScsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseScsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseScsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseScsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseScsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2csc(handle=%p, m=%d, n=%d, nnz=%d, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p, copyValues=%d, idxBase=%d)\n",
        handle, m, n, nnz, csrSortedVal, csrSortedRowPtr, csrSortedColInd, cscSortedVal, cscSortedRowInd, cscSortedColPtr, copyValues, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    float * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    float * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrSortedVal_native = (float *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    cscSortedVal_native = (float *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2csc(handle_native, m_native, n_native, nnz_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native, copyValues_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer
    // copyValues is primitive
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr, jint copyValues, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseDcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseDcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseDcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseDcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseDcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseDcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2csc(handle=%p, m=%d, n=%d, nnz=%d, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p, copyValues=%d, idxBase=%d)\n",
        handle, m, n, nnz, csrSortedVal, csrSortedRowPtr, csrSortedColInd, cscSortedVal, cscSortedRowInd, cscSortedColPtr, copyValues, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    double * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    double * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrSortedVal_native = (double *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    cscSortedVal_native = (double *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2csc(handle_native, m_native, n_native, nnz_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native, copyValues_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer
    // copyValues is primitive
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr, jint copyValues, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseCcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseCcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseCcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseCcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseCcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseCcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2csc(handle=%p, m=%d, n=%d, nnz=%d, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p, copyValues=%d, idxBase=%d)\n",
        handle, m, n, nnz, csrSortedVal, csrSortedRowPtr, csrSortedColInd, cscSortedVal, cscSortedRowInd, cscSortedColPtr, copyValues, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuComplex * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    cuComplex * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrSortedVal_native = (cuComplex *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    cscSortedVal_native = (cuComplex *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2csc(handle_native, m_native, n_native, nnz_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native, copyValues_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer
    // copyValues is primitive
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2cscNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrSortedVal, jobject csrSortedRowPtr, jobject csrSortedColInd, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr, jint copyValues, jint idxBase)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedVal' is null for cusparseZcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtr' is null for cusparseZcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColInd' is null for cusparseZcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseZcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseZcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseZcsr2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // idxBase is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2csc(handle=%p, m=%d, n=%d, nnz=%d, csrSortedVal=%p, csrSortedRowPtr=%p, csrSortedColInd=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p, copyValues=%d, idxBase=%d)\n",
        handle, m, n, nnz, csrSortedVal, csrSortedRowPtr, csrSortedColInd, cscSortedVal, cscSortedRowInd, cscSortedColPtr, copyValues, idxBase);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * csrSortedVal_native = NULL;
    int * csrSortedRowPtr_native = NULL;
    int * csrSortedColInd_native = NULL;
    cuDoubleComplex * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t idxBase_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrSortedVal_native = (cuDoubleComplex *)getPointer(env, csrSortedVal);
    csrSortedRowPtr_native = (int *)getPointer(env, csrSortedRowPtr);
    csrSortedColInd_native = (int *)getPointer(env, csrSortedColInd);
    cscSortedVal_native = (cuDoubleComplex *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    idxBase_native = (cusparseIndexBase_t)idxBase;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2csc(handle_native, m_native, n_native, nnz_native, csrSortedVal_native, csrSortedRowPtr_native, csrSortedColInd_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native, copyValues_native, idxBase_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrSortedVal is a native pointer
    // csrSortedRowPtr is a native pointer
    // csrSortedColInd is a native pointer
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer
    // copyValues is primitive
    // idxBase is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a dense matrix to a sparse matrix
in HYB storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSdense2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseSdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseSdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseSdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSdense2hyb(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSdense2hyb(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDdense2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseDdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDdense2hyb(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDdense2hyb(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCdense2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseCdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseCdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseCdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCdense2hyb(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCdense2hyb(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZdense2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject A, jint lda, jobject nnzPerRow, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive
    if (nnzPerRow == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzPerRow' is null for cusparseZdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZdense2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZdense2hyb(handle=%p, m=%d, n=%d, descrA=%p, A=%p, lda=%d, nnzPerRow=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, A, lda, nnzPerRow, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;
    int * nnzPerRow_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;
    nnzPerRow_native = (int *)getPointer(env, nnzPerRow);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZdense2hyb(handle_native, m_native, n_native, descrA_native, A_native, lda_native, nnzPerRow_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // A is a native pointer
    // lda is primitive
    // nnzPerRow is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in HYB storage format
to a dense matrix. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseShyb2denseNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseShyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseShyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseShyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseShyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseShyb2dense(handle=%p, descrA=%p, hybA=%p, A=%p, lda=%d)\n",
        handle, descrA, hybA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    float * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    A_native = (float *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseShyb2dense(handle_native, descrA_native, hybA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDhyb2denseNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseDhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDhyb2dense(handle=%p, descrA=%p, hybA=%p, A=%p, lda=%d)\n",
        handle, descrA, hybA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    double * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    A_native = (double *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDhyb2dense(handle_native, descrA_native, hybA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseChyb2denseNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseChyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseChyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseChyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseChyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseChyb2dense(handle=%p, descrA=%p, hybA=%p, A=%p, lda=%d)\n",
        handle, descrA, hybA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuComplex * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    A_native = (cuComplex *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseChyb2dense(handle_native, descrA_native, hybA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZhyb2denseNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject A, jint lda)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (A == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'A' is null for cusparseZhyb2dense");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // lda is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZhyb2dense(handle=%p, descrA=%p, hybA=%p, A=%p, lda=%d)\n",
        handle, descrA, hybA, A, lda);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuDoubleComplex * A_native = NULL;
    int lda_native = 0;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    A_native = (cuDoubleComplex *)getPointer(env, A);
    lda_native = (int)lda;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZhyb2dense(handle_native, descrA_native, hybA_native, A_native, lda_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // A is a native pointer
    // lda is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in CSR storage format
to a sparse matrix in HYB storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseScsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2hyb(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2hyb(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2hyb(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2hyb(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseCcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2hyb(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2hyb(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZcsr2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2hyb(handle=%p, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2hyb(handle_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in HYB storage format
to a sparse matrix in CSR storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseShyb2csrNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseShyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseShyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseShyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseShyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseShyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseShyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseShyb2csr(handle=%p, descrA=%p, hybA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, descrA, hybA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseShyb2csr(handle_native, descrA_native, hybA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDhyb2csrNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDhyb2csr(handle=%p, descrA=%p, hybA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, descrA, hybA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDhyb2csr(handle_native, descrA_native, hybA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseChyb2csrNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseChyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseChyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseChyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseChyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseChyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseChyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseChyb2csr(handle=%p, descrA=%p, hybA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, descrA, hybA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseChyb2csr(handle_native, descrA_native, hybA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZhyb2csrNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZhyb2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZhyb2csr(handle=%p, descrA=%p, hybA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p)\n",
        handle, descrA, hybA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZhyb2csr(handle_native, descrA_native, hybA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in CSC storage format
to a sparse matrix in HYB storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsc2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseScsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseScsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseScsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseScsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsc2hyb(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (float *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsc2hyb(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsc2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseDcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseDcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseDcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsc2hyb(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (double *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsc2hyb(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsc2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseCcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseCcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseCcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseCcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsc2hyb(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (cuComplex *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsc2hyb(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsc2hybNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jobject descrA, jobject cscSortedValA, jobject cscSortedRowIndA, jobject cscSortedColPtrA, jobject hybA, jint userEllWidth, jint partitionType)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedValA' is null for cusparseZcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowIndA' is null for cusparseZcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtrA' is null for cusparseZcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZcsc2hyb");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // userEllWidth is primitive
    // partitionType is primitive

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsc2hyb(handle=%p, m=%d, n=%d, descrA=%p, cscSortedValA=%p, cscSortedRowIndA=%p, cscSortedColPtrA=%p, hybA=%p, userEllWidth=%d, partitionType=%d)\n",
        handle, m, n, descrA, cscSortedValA, cscSortedRowIndA, cscSortedColPtrA, hybA, userEllWidth, partitionType);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * cscSortedValA_native = NULL;
    int * cscSortedRowIndA_native = NULL;
    int * cscSortedColPtrA_native = NULL;
    cusparseHybMat_t hybA_native;
    int userEllWidth_native = 0;
    cusparseHybPartition_t partitionType_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscSortedValA_native = (cuDoubleComplex *)getPointer(env, cscSortedValA);
    cscSortedRowIndA_native = (int *)getPointer(env, cscSortedRowIndA);
    cscSortedColPtrA_native = (int *)getPointer(env, cscSortedColPtrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    userEllWidth_native = (int)userEllWidth;
    partitionType_native = (cusparseHybPartition_t)partitionType;

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsc2hyb(handle_native, m_native, n_native, descrA_native, cscSortedValA_native, cscSortedRowIndA_native, cscSortedColPtrA_native, hybA_native, userEllWidth_native, partitionType_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // descrA is read-only
    // cscSortedValA is a native pointer
    // cscSortedRowIndA is a native pointer
    // cscSortedColPtrA is a native pointer
    // hybA is read-only
    // userEllWidth is primitive
    // partitionType is primitive

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in HYB storage format
to a sparse matrix in CSC storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseShyb2cscNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseShyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseShyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseShyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseShyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseShyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseShyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseShyb2csc(handle=%p, descrA=%p, hybA=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p)\n",
        handle, descrA, hybA, cscSortedVal, cscSortedRowInd, cscSortedColPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    float * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    cscSortedVal_native = (float *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseShyb2csc(handle_native, descrA_native, hybA_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDhyb2cscNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseDhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseDhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseDhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseDhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDhyb2csc(handle=%p, descrA=%p, hybA=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p)\n",
        handle, descrA, hybA, cscSortedVal, cscSortedRowInd, cscSortedColPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    double * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    cscSortedVal_native = (double *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDhyb2csc(handle_native, descrA_native, hybA_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseChyb2cscNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseChyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseChyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseChyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseChyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseChyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseChyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseChyb2csc(handle=%p, descrA=%p, hybA=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p)\n",
        handle, descrA, hybA, cscSortedVal, cscSortedRowInd, cscSortedColPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuComplex * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    cscSortedVal_native = (cuComplex *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseChyb2csc(handle_native, descrA_native, hybA_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZhyb2cscNative(JNIEnv *env, jclass cls, jobject handle, jobject descrA, jobject hybA, jobject cscSortedVal, jobject cscSortedRowInd, jobject cscSortedColPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (hybA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'hybA' is null for cusparseZhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedVal' is null for cusparseZhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedRowInd' is null for cusparseZhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscSortedColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscSortedColPtr' is null for cusparseZhyb2csc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZhyb2csc(handle=%p, descrA=%p, hybA=%p, cscSortedVal=%p, cscSortedRowInd=%p, cscSortedColPtr=%p)\n",
        handle, descrA, hybA, cscSortedVal, cscSortedRowInd, cscSortedColPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseMatDescr_t descrA_native;
    cusparseHybMat_t hybA_native;
    cuDoubleComplex * cscSortedVal_native = NULL;
    int * cscSortedRowInd_native = NULL;
    int * cscSortedColPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    hybA_native = (cusparseHybMat_t)getNativePointerValue(env, hybA);
    cscSortedVal_native = (cuDoubleComplex *)getPointer(env, cscSortedVal);
    cscSortedRowInd_native = (int *)getPointer(env, cscSortedRowInd);
    cscSortedColPtr_native = (int *)getPointer(env, cscSortedColPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZhyb2csc(handle_native, descrA_native, hybA_native, cscSortedVal_native, cscSortedRowInd_native, cscSortedColPtr_native);

    // Write back native variable values
    // handle is read-only
    // descrA is read-only
    // hybA is read-only
    // cscSortedVal is a native pointer
    // cscSortedRowInd is a native pointer
    // cscSortedColPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in CSR storage format
to a sparse matrix in block-CSR storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsr2bsrNnzNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint blockDim, jobject descrC, jobject bsrSortedRowPtrC, jobject nnzTotalDevHostPtr)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsr2bsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXcsr2bsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseXcsr2bsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseXcsr2bsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseXcsr2bsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseXcsr2bsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseXcsr2bsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsr2bsrNnz(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, blockDim=%d, descrC=%p, bsrSortedRowPtrC=%p, nnzTotalDevHostPtr=%p)\n",
        handle, dirA, m, n, descrA, csrSortedRowPtrA, csrSortedColIndA, blockDim, descrC, bsrSortedRowPtrC, nnzTotalDevHostPtr);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    int * bsrSortedRowPtrC_native = NULL;
    int * nnzTotalDevHostPtr_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsr2bsrNnz(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, blockDim_native, descrC_native, bsrSortedRowPtrC_native, nnzTotalDevHostPtr_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // bsrSortedRowPtrC is a native pointer
    // nnzTotalDevHostPtr is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2bsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint blockDim, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseScsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2bsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, blockDim=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, blockDim, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    float * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (float *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2bsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, blockDim_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2bsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint blockDim, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseDcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2bsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, blockDim=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, blockDim, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    double * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (double *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2bsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, blockDim_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2bsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint blockDim, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseCcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2bsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, blockDim=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, blockDim, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    cuComplex * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (cuComplex *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2bsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, blockDim_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2bsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint blockDim, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseZcsr2bsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2bsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, blockDim=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, blockDim, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (cuDoubleComplex *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2bsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, blockDim_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in block-CSR storage format
to a sparse matrix in CSR storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSbsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseSbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSbsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    float * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (float *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSbsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDbsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseDbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDbsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    double * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (double *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDbsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCbsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseCbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCbsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    cuComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCbsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZbsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint blockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // blockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseZbsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZbsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, blockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, blockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int blockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    blockDim_native = (int)blockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuDoubleComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZbsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, blockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // blockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in general block-CSR storage format
to a sparse matrix in general block-CSC storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgebsr2gebsc_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseSgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgebsr2gebsc_bufferSize(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgebsr2gebsc_bufferSize(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgebsr2gebsc_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgebsr2gebsc_bufferSize(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgebsr2gebsc_bufferSize(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgebsr2gebsc_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgebsr2gebsc_bufferSize(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgebsr2gebsc_bufferSize(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgebsr2gebsc_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZgebsr2gebsc_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgebsr2gebsc_bufferSize(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgebsr2gebsc_bufferSize(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgebsr2gebsc_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseSgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgebsr2gebsc_bufferSizeExt(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgebsr2gebsc_bufferSizeExt(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgebsr2gebsc_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgebsr2gebsc_bufferSizeExt(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgebsr2gebsc_bufferSizeExt(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgebsr2gebsc_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgebsr2gebsc_bufferSizeExt(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgebsr2gebsc_bufferSizeExt(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgebsr2gebsc_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZgebsr2gebsc_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgebsr2gebsc_bufferSizeExt(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgebsr2gebsc_bufferSizeExt(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgebsr2gebscNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jobject bscVal, jobject bscRowInd, jobject bscColPtr, jint copyValues, jint baseIdx, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (bscVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscVal' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscRowInd' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscColPtr' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // baseIdx is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgebsr2gebsc(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, bscVal=%p, bscRowInd=%p, bscColPtr=%p, copyValues=%d, baseIdx=%d, pBuffer=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, bscVal, bscRowInd, bscColPtr, copyValues, baseIdx, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    float * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    float * bscVal_native = NULL;
    int * bscRowInd_native = NULL;
    int * bscColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t baseIdx_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (float *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    bscVal_native = (float *)getPointer(env, bscVal);
    bscRowInd_native = (int *)getPointer(env, bscRowInd);
    bscColPtr_native = (int *)getPointer(env, bscColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    baseIdx_native = (cusparseIndexBase_t)baseIdx;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgebsr2gebsc(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, bscVal_native, bscRowInd_native, bscColPtr_native, copyValues_native, baseIdx_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // bscVal is a native pointer
    // bscRowInd is a native pointer
    // bscColPtr is a native pointer
    // copyValues is primitive
    // baseIdx is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgebsr2gebscNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jobject bscVal, jobject bscRowInd, jobject bscColPtr, jint copyValues, jint baseIdx, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (bscVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscVal' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscRowInd' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscColPtr' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // baseIdx is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgebsr2gebsc(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, bscVal=%p, bscRowInd=%p, bscColPtr=%p, copyValues=%d, baseIdx=%d, pBuffer=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, bscVal, bscRowInd, bscColPtr, copyValues, baseIdx, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    double * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    double * bscVal_native = NULL;
    int * bscRowInd_native = NULL;
    int * bscColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t baseIdx_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (double *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    bscVal_native = (double *)getPointer(env, bscVal);
    bscRowInd_native = (int *)getPointer(env, bscRowInd);
    bscColPtr_native = (int *)getPointer(env, bscColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    baseIdx_native = (cusparseIndexBase_t)baseIdx;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgebsr2gebsc(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, bscVal_native, bscRowInd_native, bscColPtr_native, copyValues_native, baseIdx_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // bscVal is a native pointer
    // bscRowInd is a native pointer
    // bscColPtr is a native pointer
    // copyValues is primitive
    // baseIdx is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgebsr2gebscNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jobject bscVal, jobject bscRowInd, jobject bscColPtr, jint copyValues, jint baseIdx, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (bscVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscVal' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscRowInd' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscColPtr' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // baseIdx is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgebsr2gebsc(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, bscVal=%p, bscRowInd=%p, bscColPtr=%p, copyValues=%d, baseIdx=%d, pBuffer=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, bscVal, bscRowInd, bscColPtr, copyValues, baseIdx, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    cuComplex * bscVal_native = NULL;
    int * bscRowInd_native = NULL;
    int * bscColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t baseIdx_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (cuComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    bscVal_native = (cuComplex *)getPointer(env, bscVal);
    bscRowInd_native = (int *)getPointer(env, bscRowInd);
    bscColPtr_native = (int *)getPointer(env, bscColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    baseIdx_native = (cusparseIndexBase_t)baseIdx;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgebsr2gebsc(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, bscVal_native, bscRowInd_native, bscColPtr_native, copyValues_native, baseIdx_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // bscVal is a native pointer
    // bscRowInd is a native pointer
    // bscColPtr is a native pointer
    // copyValues is primitive
    // baseIdx is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgebsr2gebscNative(JNIEnv *env, jclass cls, jobject handle, jint mb, jint nb, jint nnzb, jobject bsrSortedVal, jobject bsrSortedRowPtr, jobject bsrSortedColInd, jint rowBlockDim, jint colBlockDim, jobject bscVal, jobject bscRowInd, jobject bscColPtr, jint copyValues, jint baseIdx, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (bsrSortedVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedVal' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtr' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColInd' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (bscVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscVal' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscRowInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscRowInd' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bscColPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bscColPtr' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // copyValues is primitive
    // baseIdx is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZgebsr2gebsc");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgebsr2gebsc(handle=%p, mb=%d, nb=%d, nnzb=%d, bsrSortedVal=%p, bsrSortedRowPtr=%p, bsrSortedColInd=%p, rowBlockDim=%d, colBlockDim=%d, bscVal=%p, bscRowInd=%p, bscColPtr=%p, copyValues=%d, baseIdx=%d, pBuffer=%p)\n",
        handle, mb, nb, nnzb, bsrSortedVal, bsrSortedRowPtr, bsrSortedColInd, rowBlockDim, colBlockDim, bscVal, bscRowInd, bscColPtr, copyValues, baseIdx, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cuDoubleComplex * bsrSortedVal_native = NULL;
    int * bsrSortedRowPtr_native = NULL;
    int * bsrSortedColInd_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    cuDoubleComplex * bscVal_native = NULL;
    int * bscRowInd_native = NULL;
    int * bscColPtr_native = NULL;
    cusparseAction_t copyValues_native;
    cusparseIndexBase_t baseIdx_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    bsrSortedVal_native = (cuDoubleComplex *)getPointer(env, bsrSortedVal);
    bsrSortedRowPtr_native = (int *)getPointer(env, bsrSortedRowPtr);
    bsrSortedColInd_native = (int *)getPointer(env, bsrSortedColInd);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    bscVal_native = (cuDoubleComplex *)getPointer(env, bscVal);
    bscRowInd_native = (int *)getPointer(env, bscRowInd);
    bscColPtr_native = (int *)getPointer(env, bscColPtr);
    copyValues_native = (cusparseAction_t)copyValues;
    baseIdx_native = (cusparseIndexBase_t)baseIdx;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgebsr2gebsc(handle_native, mb_native, nb_native, nnzb_native, bsrSortedVal_native, bsrSortedRowPtr_native, bsrSortedColInd_native, rowBlockDim_native, colBlockDim_native, bscVal_native, bscRowInd_native, bscColPtr_native, copyValues_native, baseIdx_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // bsrSortedVal is a native pointer
    // bsrSortedRowPtr is a native pointer
    // bsrSortedColInd is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // bscVal is a native pointer
    // bscRowInd is a native pointer
    // bscColPtr is a native pointer
    // copyValues is primitive
    // baseIdx is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in general block-CSR storage format
to a sparse matrix in CSR storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXgebsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDim, jint colBlockDim, jobject descrC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseXgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseXgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseXgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseXgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseXgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXgebsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, descrC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDim, colBlockDim, descrC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXgebsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, descrC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // descrC is read-only
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgebsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDim, jint colBlockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseSgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgebsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDim, colBlockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    float * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (float *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgebsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgebsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDim, jint colBlockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseDgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgebsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDim, colBlockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    double * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (double *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgebsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgebsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDim, jint colBlockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseCgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgebsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDim, colBlockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    cuComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgebsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgebsr2csrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDim, jint colBlockDim, jobject descrC, jobject csrSortedValC, jobject csrSortedRowPtrC, jobject csrSortedColIndC)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValC' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrC' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndC' is null for cusparseZgebsr2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgebsr2csr(handle=%p, dirA=%d, mb=%d, nb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, descrC=%p, csrSortedValC=%p, csrSortedRowPtrC=%p, csrSortedColIndC=%p)\n",
        handle, dirA, mb, nb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDim, colBlockDim, descrC, csrSortedValC, csrSortedRowPtrC, csrSortedColIndC);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * csrSortedValC_native = NULL;
    int * csrSortedRowPtrC_native = NULL;
    int * csrSortedColIndC_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    csrSortedValC_native = (cuDoubleComplex *)getPointer(env, csrSortedValC);
    csrSortedRowPtrC_native = (int *)getPointer(env, csrSortedRowPtrC);
    csrSortedColIndC_native = (int *)getPointer(env, csrSortedColIndC);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgebsr2csr(handle_native, dirA_native, mb_native, nb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, descrC_native, csrSortedValC_native, csrSortedRowPtrC_native, csrSortedColIndC_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // descrC is read-only
    // csrSortedValC is a native pointer
    // csrSortedRowPtrC is a native pointer
    // csrSortedColIndC is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in CSR storage format
to a sparse matrix in general block-CSR storage format. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseScsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2gebsr_bufferSize(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2gebsr_bufferSize(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2gebsr_bufferSize(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2gebsr_bufferSize(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2gebsr_bufferSize(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2gebsr_bufferSize(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZcsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2gebsr_bufferSize(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2gebsr_bufferSize(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseScsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2gebsr_bufferSizeExt(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2gebsr_bufferSizeExt(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2gebsr_bufferSizeExt(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jint rowBlockDim, jint colBlockDim, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZcsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, rowBlockDim=%d, colBlockDim=%d, pBufferSize=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, rowBlockDim, colBlockDim, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2gebsr_bufferSizeExt(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, rowBlockDim_native, colBlockDim_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsr2gebsrNnzNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrC, jobject bsrSortedRowPtrC, jint rowBlockDim, jint colBlockDim, jobject nnzTotalDevHostPtr, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseXcsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsr2gebsrNnz(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrC=%p, bsrSortedRowPtrC=%p, rowBlockDim=%d, colBlockDim=%d, nnzTotalDevHostPtr=%p, pBuffer=%p)\n",
        handle, dirA, m, n, descrA, csrSortedRowPtrA, csrSortedColIndA, descrC, bsrSortedRowPtrC, rowBlockDim, colBlockDim, nnzTotalDevHostPtr, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrC_native;
    int * bsrSortedRowPtrC_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    int * nnzTotalDevHostPtr_native = NULL;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsr2gebsrNnz(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrC_native, bsrSortedRowPtrC_native, rowBlockDim_native, colBlockDim_native, nnzTotalDevHostPtr_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrC is read-only
    // bsrSortedRowPtrC is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // nnzTotalDevHostPtr is a native pointer
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDim, jint colBlockDim, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2gebsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDim=%d, colBlockDim=%d, pBuffer=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDim, colBlockDim, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrC_native;
    float * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (float *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (float *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2gebsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDim_native, colBlockDim_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDim, jint colBlockDim, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2gebsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDim=%d, colBlockDim=%d, pBuffer=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDim, colBlockDim, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrC_native;
    double * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (double *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (double *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2gebsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDim_native, colBlockDim_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDim, jint colBlockDim, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2gebsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDim=%d, colBlockDim=%d, pBuffer=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDim, colBlockDim, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuComplex * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (cuComplex *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2gebsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDim_native, colBlockDim_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint m, jint n, jobject descrA, jobject csrSortedValA, jobject csrSortedRowPtrA, jobject csrSortedColIndA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDim, jint colBlockDim, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // m is primitive
    // n is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedValA' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedRowPtrA' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrSortedColIndA' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDim is primitive
    // colBlockDim is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2gebsr(handle=%p, dirA=%d, m=%d, n=%d, descrA=%p, csrSortedValA=%p, csrSortedRowPtrA=%p, csrSortedColIndA=%p, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDim=%d, colBlockDim=%d, pBuffer=%p)\n",
        handle, dirA, m, n, descrA, csrSortedValA, csrSortedRowPtrA, csrSortedColIndA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDim, colBlockDim, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int m_native = 0;
    int n_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrSortedValA_native = NULL;
    int * csrSortedRowPtrA_native = NULL;
    int * csrSortedColIndA_native = NULL;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDim_native = 0;
    int colBlockDim_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    m_native = (int)m;
    n_native = (int)n;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrSortedValA_native = (cuDoubleComplex *)getPointer(env, csrSortedValA);
    csrSortedRowPtrA_native = (int *)getPointer(env, csrSortedRowPtrA);
    csrSortedColIndA_native = (int *)getPointer(env, csrSortedColIndA);
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (cuDoubleComplex *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDim_native = (int)rowBlockDim;
    colBlockDim_native = (int)colBlockDim;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2gebsr(handle_native, dirA_native, m_native, n_native, descrA_native, csrSortedValA_native, csrSortedRowPtrA_native, csrSortedColIndA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDim_native, colBlockDim_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // m is primitive
    // n is primitive
    // descrA is read-only
    // csrSortedValA is a native pointer
    // csrSortedRowPtrA is a native pointer
    // csrSortedColIndA is a native pointer
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDim is primitive
    // colBlockDim is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: This routine converts a sparse matrix in general block-CSR storage format
to a sparse matrix in general block-CSR storage format with different block size. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgebsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseSgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgebsr2gebsr_bufferSize(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgebsr2gebsr_bufferSize(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgebsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgebsr2gebsr_bufferSize(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgebsr2gebsr_bufferSize(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgebsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgebsr2gebsr_bufferSize(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgebsr2gebsr_bufferSize(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgebsr2gebsr_1bufferSizeNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZgebsr2gebsr_bufferSize");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgebsr2gebsr_bufferSize(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSizeInBytes=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    int pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgebsr2gebsr_bufferSize(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgebsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseSgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgebsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSize=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgebsr2gebsr_bufferSizeExt(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgebsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseDgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgebsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSize=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgebsr2gebsr_bufferSizeExt(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgebsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseCgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgebsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSize=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgebsr2gebsr_bufferSizeExt(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgebsr2gebsr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jint rowBlockDimC, jint colBlockDimC, jintArray pBufferSize)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBufferSize == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSize' is null for cusparseZgebsr2gebsr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgebsr2gebsr_bufferSizeExt(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, rowBlockDimC=%d, colBlockDimC=%d, pBufferSize=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, rowBlockDimC, colBlockDimC, pBufferSize);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    size_t pBufferSize_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    // pBufferSize is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgebsr2gebsr_bufferSizeExt(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, rowBlockDimC_native, colBlockDimC_native, &pBufferSize_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (!set(env, pBufferSize, 0, (jint)pBufferSize_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXgebsr2gebsrNnzNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jobject descrC, jobject bsrSortedRowPtrC, jint rowBlockDimC, jint colBlockDimC, jobject nnzTotalDevHostPtr, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (nnzTotalDevHostPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'nnzTotalDevHostPtr' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseXgebsr2gebsrNnz");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXgebsr2gebsrNnz(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, descrC=%p, bsrSortedRowPtrC=%p, rowBlockDimC=%d, colBlockDimC=%d, nnzTotalDevHostPtr=%p, pBuffer=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, descrC, bsrSortedRowPtrC, rowBlockDimC, colBlockDimC, nnzTotalDevHostPtr, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    cusparseMatDescr_t descrC_native;
    int * bsrSortedRowPtrC_native = NULL;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    int * nnzTotalDevHostPtr_native = NULL;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    nnzTotalDevHostPtr_native = (int *)getPointer(env, nnzTotalDevHostPtr);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXgebsr2gebsrNnz(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, descrC_native, bsrSortedRowPtrC_native, rowBlockDimC_native, colBlockDimC_native, nnzTotalDevHostPtr_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // descrC is read-only
    // bsrSortedRowPtrC is a native pointer
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    // nnzTotalDevHostPtr is a native pointer
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseSgebsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDimC, jint colBlockDimC, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseSgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseSgebsr2gebsr(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDimC=%d, colBlockDimC=%d, pBuffer=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDimC, colBlockDimC, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    float * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    cusparseMatDescr_t descrC_native;
    float * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (float *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (float *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseSgebsr2gebsr(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDimC_native, colBlockDimC_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDgebsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDimC, jint colBlockDimC, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDgebsr2gebsr(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDimC=%d, colBlockDimC=%d, pBuffer=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDimC, colBlockDimC, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    double * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    cusparseMatDescr_t descrC_native;
    double * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (double *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (double *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDgebsr2gebsr(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDimC_native, colBlockDimC_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCgebsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDimC, jint colBlockDimC, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCgebsr2gebsr(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDimC=%d, colBlockDimC=%d, pBuffer=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDimC, colBlockDimC, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    cusparseMatDescr_t descrC_native;
    cuComplex * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (cuComplex *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCgebsr2gebsr(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDimC_native, colBlockDimC_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZgebsr2gebsrNative(JNIEnv *env, jclass cls, jobject handle, jint dirA, jint mb, jint nb, jint nnzb, jobject descrA, jobject bsrSortedValA, jobject bsrSortedRowPtrA, jobject bsrSortedColIndA, jint rowBlockDimA, jint colBlockDimA, jobject descrC, jobject bsrSortedValC, jobject bsrSortedRowPtrC, jobject bsrSortedColIndC, jint rowBlockDimC, jint colBlockDimC, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValA' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrA' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndA' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    if (descrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrC' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedValC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedValC' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedRowPtrC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedRowPtrC' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (bsrSortedColIndC == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'bsrSortedColIndC' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZgebsr2gebsr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZgebsr2gebsr(handle=%p, dirA=%d, mb=%d, nb=%d, nnzb=%d, descrA=%p, bsrSortedValA=%p, bsrSortedRowPtrA=%p, bsrSortedColIndA=%p, rowBlockDimA=%d, colBlockDimA=%d, descrC=%p, bsrSortedValC=%p, bsrSortedRowPtrC=%p, bsrSortedColIndC=%p, rowBlockDimC=%d, colBlockDimC=%d, pBuffer=%p)\n",
        handle, dirA, mb, nb, nnzb, descrA, bsrSortedValA, bsrSortedRowPtrA, bsrSortedColIndA, rowBlockDimA, colBlockDimA, descrC, bsrSortedValC, bsrSortedRowPtrC, bsrSortedColIndC, rowBlockDimC, colBlockDimC, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    cusparseDirection_t dirA_native;
    int mb_native = 0;
    int nb_native = 0;
    int nnzb_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * bsrSortedValA_native = NULL;
    int * bsrSortedRowPtrA_native = NULL;
    int * bsrSortedColIndA_native = NULL;
    int rowBlockDimA_native = 0;
    int colBlockDimA_native = 0;
    cusparseMatDescr_t descrC_native;
    cuDoubleComplex * bsrSortedValC_native = NULL;
    int * bsrSortedRowPtrC_native = NULL;
    int * bsrSortedColIndC_native = NULL;
    int rowBlockDimC_native = 0;
    int colBlockDimC_native = 0;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    dirA_native = (cusparseDirection_t)dirA;
    mb_native = (int)mb;
    nb_native = (int)nb;
    nnzb_native = (int)nnzb;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    bsrSortedValA_native = (cuDoubleComplex *)getPointer(env, bsrSortedValA);
    bsrSortedRowPtrA_native = (int *)getPointer(env, bsrSortedRowPtrA);
    bsrSortedColIndA_native = (int *)getPointer(env, bsrSortedColIndA);
    rowBlockDimA_native = (int)rowBlockDimA;
    colBlockDimA_native = (int)colBlockDimA;
    descrC_native = (cusparseMatDescr_t)getNativePointerValue(env, descrC);
    bsrSortedValC_native = (cuDoubleComplex *)getPointer(env, bsrSortedValC);
    bsrSortedRowPtrC_native = (int *)getPointer(env, bsrSortedRowPtrC);
    bsrSortedColIndC_native = (int *)getPointer(env, bsrSortedColIndC);
    rowBlockDimC_native = (int)rowBlockDimC;
    colBlockDimC_native = (int)colBlockDimC;
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZgebsr2gebsr(handle_native, dirA_native, mb_native, nb_native, nnzb_native, descrA_native, bsrSortedValA_native, bsrSortedRowPtrA_native, bsrSortedColIndA_native, rowBlockDimA_native, colBlockDimA_native, descrC_native, bsrSortedValC_native, bsrSortedRowPtrC_native, bsrSortedColIndC_native, rowBlockDimC_native, colBlockDimC_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // dirA is primitive
    // mb is primitive
    // nb is primitive
    // nnzb is primitive
    // descrA is read-only
    // bsrSortedValA is a native pointer
    // bsrSortedRowPtrA is a native pointer
    // bsrSortedColIndA is a native pointer
    // rowBlockDimA is primitive
    // colBlockDimA is primitive
    // descrC is read-only
    // bsrSortedValC is a native pointer
    // bsrSortedRowPtrC is a native pointer
    // bsrSortedColIndC is a native pointer
    // rowBlockDimC is primitive
    // colBlockDimC is primitive
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** --- Sparse Matrix Sorting --- */
/** Description: Create a identity sequence p=[0,1,...,n-1]. */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCreateIdentityPermutationNative(JNIEnv *env, jclass cls, jobject handle, jint n, jobject p)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCreateIdentityPermutation");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // n is primitive
    if (p == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'p' is null for cusparseCreateIdentityPermutation");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCreateIdentityPermutation(handle=%p, n=%d, p=%p)\n",
        handle, n, p);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int n_native = 0;
    int * p_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    n_native = (int)n;
    p_native = (int *)getPointer(env, p);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCreateIdentityPermutation(handle_native, n_native, p_native);

    // Write back native variable values
    // handle is read-only
    // n is primitive
    // p is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Sort sparse matrix stored in COO format */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcoosort_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject cooRowsA, jobject cooColsA, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcoosort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (cooRowsA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooRowsA' is null for cusparseXcoosort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cooColsA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooColsA' is null for cusparseXcoosort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseXcoosort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcoosort_bufferSizeExt(handle=%p, m=%d, n=%d, nnz=%d, cooRowsA=%p, cooColsA=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, nnz, cooRowsA, cooColsA, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int * cooRowsA_native = NULL;
    int * cooColsA_native = NULL;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    cooRowsA_native = (int *)getPointer(env, cooRowsA);
    cooColsA_native = (int *)getPointer(env, cooColsA);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcoosort_bufferSizeExt(handle_native, m_native, n_native, nnz_native, cooRowsA_native, cooColsA_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // cooRowsA is a native pointer
    // cooColsA is a native pointer
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcoosortByRowNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject cooRowsA, jobject cooColsA, jobject P, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcoosortByRow");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (cooRowsA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooRowsA' is null for cusparseXcoosortByRow");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cooColsA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooColsA' is null for cusparseXcoosortByRow");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (P == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'P' is null for cusparseXcoosortByRow");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseXcoosortByRow");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcoosortByRow(handle=%p, m=%d, n=%d, nnz=%d, cooRowsA=%p, cooColsA=%p, P=%p, pBuffer=%p)\n",
        handle, m, n, nnz, cooRowsA, cooColsA, P, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int * cooRowsA_native = NULL;
    int * cooColsA_native = NULL;
    int * P_native = NULL;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    cooRowsA_native = (int *)getPointer(env, cooRowsA);
    cooColsA_native = (int *)getPointer(env, cooColsA);
    P_native = (int *)getPointer(env, P);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcoosortByRow(handle_native, m_native, n_native, nnz_native, cooRowsA_native, cooColsA_native, P_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // cooRowsA is a native pointer
    // cooColsA is a native pointer
    // P is a native pointer
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcoosortByColumnNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject cooRowsA, jobject cooColsA, jobject P, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcoosortByColumn");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (cooRowsA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooRowsA' is null for cusparseXcoosortByColumn");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cooColsA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cooColsA' is null for cusparseXcoosortByColumn");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (P == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'P' is null for cusparseXcoosortByColumn");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseXcoosortByColumn");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcoosortByColumn(handle=%p, m=%d, n=%d, nnz=%d, cooRowsA=%p, cooColsA=%p, P=%p, pBuffer=%p)\n",
        handle, m, n, nnz, cooRowsA, cooColsA, P, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int * cooRowsA_native = NULL;
    int * cooColsA_native = NULL;
    int * P_native = NULL;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    cooRowsA_native = (int *)getPointer(env, cooRowsA);
    cooColsA_native = (int *)getPointer(env, cooColsA);
    P_native = (int *)getPointer(env, P);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcoosortByColumn(handle_native, m_native, n_native, nnz_native, cooRowsA_native, cooColsA_native, P_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // cooRowsA is a native pointer
    // cooColsA is a native pointer
    // P is a native pointer
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Sort sparse matrix stored in CSR format */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsrsort_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrRowPtrA, jobject csrColIndA, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsrsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtrA' is null for cusparseXcsrsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColIndA' is null for cusparseXcsrsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseXcsrsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsrsort_bufferSizeExt(handle=%p, m=%d, n=%d, nnz=%d, csrRowPtrA=%p, csrColIndA=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, nnz, csrRowPtrA, csrColIndA, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int * csrRowPtrA_native = NULL;
    int * csrColIndA_native = NULL;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrRowPtrA_native = (int *)getPointer(env, csrRowPtrA);
    csrColIndA_native = (int *)getPointer(env, csrColIndA);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsrsort_bufferSizeExt(handle_native, m_native, n_native, nnz_native, csrRowPtrA_native, csrColIndA_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrRowPtrA is a native pointer
    // csrColIndA is a native pointer
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcsrsortNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrRowPtrA, jobject csrColIndA, jobject P, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcsrsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXcsrsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtrA' is null for cusparseXcsrsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColIndA' is null for cusparseXcsrsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (P == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'P' is null for cusparseXcsrsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseXcsrsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcsrsort(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrRowPtrA=%p, csrColIndA=%p, P=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrRowPtrA, csrColIndA, P, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    int * csrRowPtrA_native = NULL;
    int * csrColIndA_native = NULL;
    int * P_native = NULL;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrRowPtrA_native = (int *)getPointer(env, csrRowPtrA);
    csrColIndA_native = (int *)getPointer(env, csrColIndA);
    P_native = (int *)getPointer(env, P);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcsrsort(handle_native, m_native, n_native, nnz_native, descrA_native, csrRowPtrA_native, csrColIndA_native, P_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrRowPtrA is a native pointer
    // csrColIndA is a native pointer
    // P is a native pointer
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Sort sparse matrix stored in CSC format */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcscsort_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject cscColPtrA, jobject cscRowIndA, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcscsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (cscColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscColPtrA' is null for cusparseXcscsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscRowIndA' is null for cusparseXcscsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseXcscsort_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcscsort_bufferSizeExt(handle=%p, m=%d, n=%d, nnz=%d, cscColPtrA=%p, cscRowIndA=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, nnz, cscColPtrA, cscRowIndA, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    int * cscColPtrA_native = NULL;
    int * cscRowIndA_native = NULL;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    cscColPtrA_native = (int *)getPointer(env, cscColPtrA);
    cscRowIndA_native = (int *)getPointer(env, cscRowIndA);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcscsort_bufferSizeExt(handle_native, m_native, n_native, nnz_native, cscColPtrA_native, cscRowIndA_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // cscColPtrA is a native pointer
    // cscRowIndA is a native pointer
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseXcscsortNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject cscColPtrA, jobject cscRowIndA, jobject P, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseXcscsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseXcscsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscColPtrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscColPtrA' is null for cusparseXcscsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (cscRowIndA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'cscRowIndA' is null for cusparseXcscsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (P == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'P' is null for cusparseXcscsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseXcscsort");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseXcscsort(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, cscColPtrA=%p, cscRowIndA=%p, P=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, cscColPtrA, cscRowIndA, P, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    int * cscColPtrA_native = NULL;
    int * cscRowIndA_native = NULL;
    int * P_native = NULL;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    cscColPtrA_native = (int *)getPointer(env, cscColPtrA);
    cscRowIndA_native = (int *)getPointer(env, cscRowIndA);
    P_native = (int *)getPointer(env, P);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseXcscsort(handle_native, m_native, n_native, nnz_native, descrA_native, cscColPtrA_native, cscRowIndA_native, P_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // cscColPtrA is a native pointer
    // cscRowIndA is a native pointer
    // P is a native pointer
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Wrapper that sorts sparse matrix stored in CSR format
(without exposing the permutation). */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsru2csr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseScsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseScsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseScsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseScsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsru2csr_bufferSizeExt(handle=%p, m=%d, n=%d, nnz=%d, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, nnz, csrVal, csrRowPtr, csrColInd, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    float * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrVal_native = (float *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsru2csr_bufferSizeExt(handle_native, m_native, n_native, nnz_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsru2csr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseDcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseDcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseDcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseDcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsru2csr_bufferSizeExt(handle=%p, m=%d, n=%d, nnz=%d, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, nnz, csrVal, csrRowPtr, csrColInd, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    double * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrVal_native = (double *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsru2csr_bufferSizeExt(handle_native, m_native, n_native, nnz_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsru2csr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseCcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseCcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseCcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseCcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsru2csr_bufferSizeExt(handle=%p, m=%d, n=%d, nnz=%d, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, nnz, csrVal, csrRowPtr, csrColInd, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuComplex * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrVal_native = (cuComplex *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsru2csr_bufferSizeExt(handle_native, m_native, n_native, nnz_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsru2csr_1bufferSizeExtNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jintArray pBufferSizeInBytes)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseZcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseZcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseZcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBufferSizeInBytes == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBufferSizeInBytes' is null for cusparseZcsru2csr_bufferSizeExt");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsru2csr_bufferSizeExt(handle=%p, m=%d, n=%d, nnz=%d, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBufferSizeInBytes=%p)\n",
        handle, m, n, nnz, csrVal, csrRowPtr, csrColInd, info, pBufferSizeInBytes);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cuDoubleComplex * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    size_t pBufferSizeInBytes_native;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    csrVal_native = (cuDoubleComplex *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    // pBufferSizeInBytes is write-only

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsru2csr_bufferSizeExt(handle_native, m_native, n_native, nnz_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, &pBufferSizeInBytes_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    if (!set(env, pBufferSizeInBytes, 0, (jint)pBufferSizeInBytes_native)) return JCUSPARSE_STATUS_INTERNAL_ERROR;

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsru2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseScsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseScsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseScsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsru2csr(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (float *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsru2csr(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsru2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseDcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseDcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseDcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsru2csr(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (double *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsru2csr(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsru2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseCcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseCcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseCcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsru2csr(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (cuComplex *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsru2csr(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsru2csrNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseZcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseZcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseZcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsru2csr");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsru2csr(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (cuDoubleComplex *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsru2csr(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

/** Description: Wrapper that un-sorts sparse matrix stored in CSR format
(without exposing the permutation). */
JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseScsr2csruNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseScsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseScsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseScsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseScsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseScsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseScsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseScsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseScsr2csru(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    float * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (float *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseScsr2csru(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseDcsr2csruNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseDcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseDcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseDcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseDcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseDcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseDcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseDcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseDcsr2csru(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    double * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (double *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseDcsr2csru(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseCcsr2csruNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseCcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseCcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseCcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseCcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseCcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseCcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseCcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseCcsr2csru(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuComplex * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (cuComplex *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseCcsr2csru(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

JNIEXPORT jint JNICALL Java_jcuda_jcusparse_JCusparse_cusparseZcsr2csruNative(JNIEnv *env, jclass cls, jobject handle, jint m, jint n, jint nnz, jobject descrA, jobject csrVal, jobject csrRowPtr, jobject csrColInd, jobject info, jobject pBuffer)
{
    // Null-checks for non-primitive arguments
    if (handle == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'handle' is null for cusparseZcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    // m is primitive
    // n is primitive
    // nnz is primitive
    if (descrA == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'descrA' is null for cusparseZcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrVal == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrVal' is null for cusparseZcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrRowPtr == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrRowPtr' is null for cusparseZcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (csrColInd == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'csrColInd' is null for cusparseZcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (info == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'info' is null for cusparseZcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }
    if (pBuffer == NULL)
    {
        ThrowByName(env, "java/lang/NullPointerException", "Parameter 'pBuffer' is null for cusparseZcsr2csru");
        return JCUSPARSE_STATUS_INTERNAL_ERROR;
    }

    // Log message
    Logger::log(LOG_TRACE, "Executing cusparseZcsr2csru(handle=%p, m=%d, n=%d, nnz=%d, descrA=%p, csrVal=%p, csrRowPtr=%p, csrColInd=%p, info=%p, pBuffer=%p)\n",
        handle, m, n, nnz, descrA, csrVal, csrRowPtr, csrColInd, info, pBuffer);

    // Native variable declarations
    cusparseHandle_t handle_native;
    int m_native = 0;
    int n_native = 0;
    int nnz_native = 0;
    cusparseMatDescr_t descrA_native;
    cuDoubleComplex * csrVal_native = NULL;
    int * csrRowPtr_native = NULL;
    int * csrColInd_native = NULL;
    csru2csrInfo_t info_native;
    void * pBuffer_native = NULL;

    // Obtain native variable values
    handle_native = (cusparseHandle_t)getNativePointerValue(env, handle);
    m_native = (int)m;
    n_native = (int)n;
    nnz_native = (int)nnz;
    descrA_native = (cusparseMatDescr_t)getNativePointerValue(env, descrA);
    csrVal_native = (cuDoubleComplex *)getPointer(env, csrVal);
    csrRowPtr_native = (int *)getPointer(env, csrRowPtr);
    csrColInd_native = (int *)getPointer(env, csrColInd);
    info_native = (csru2csrInfo_t)getNativePointerValue(env, info);
    pBuffer_native = (void *)getPointer(env, pBuffer);

    // Native function call
    cusparseStatus_t jniResult_native = cusparseZcsr2csru(handle_native, m_native, n_native, nnz_native, descrA_native, csrVal_native, csrRowPtr_native, csrColInd_native, info_native, pBuffer_native);

    // Write back native variable values
    // handle is read-only
    // m is primitive
    // n is primitive
    // nnz is primitive
    // descrA is read-only
    // csrVal is a native pointer
    // csrRowPtr is a native pointer
    // csrColInd is a native pointer
    // info is read-only
    // pBuffer is a native pointer

    // Return the result
    jint jniResult = (jint)jniResult_native;
    return jniResult;
}

